{% assign secret = customer.id | append: "EEAE1A34C8A2B8478CF4B5D4E9477FAD13C4F55A98553570BF541384469776A0" |  hmac_sha256: "E8BA4BB69E06012234DA348CC6FC5254" %}
<script>
		setTimeout(function(){
			{% if customer == blank %}
				setCookie('customerAccessToken', false);
			{% endif %}
			var customerAccessToken = getCookie('customerAccessToken');
			console.log('Customer access token ', customerAccessToken);
			if(!customerAccessToken || customerAccessToken == 'false'){
				window.dispatchEvent(new Event('openPopup'));
			}
		}, 1000)
</script>

<section id="section-{{ section.id }}" class="section bg--color section--xs-spacing" data-section-id="{{ section.id }}" data-section-type="rc_customer_portal">
	<div id="app-rc" data-subscription="{{secret}}">
		<div class="pal" v-if="!userLogged">
			<h3 class="text-center man pal hide">Vous devez être connecté pour accéder à cette page</h3>
		</div>
		<template v-else>
			<!-- overlay and modal -->
			<div class="rc_overlay" v-bind:class="{'is-active': showModal == true}" @click="componentModal != 'loader' ? closeModal() : null"></div>
			<template v-if="config_loaded">
				<rc-modal v-if="this.general_config.view_edits == 'modal'" :component_modal="componentModal" :data_modal="dataModal" :show_modal="showModal" v-bind="config"></rc-modal>
				<rc-aside v-else class="rc-panel" :component_modal="componentModal" :data_modal="dataModal" :show_modal="showModal" v-bind="config"></rc-aside>
				<vue-toastr ref="mytoast"></vue-toastr>
			</template>

			<div class="section--vertical-spacing--xsmall rc_container">
				<div class="rc-header__background"></div>
				<div class="container--large rc_container-flex">
					<!-- Nav bar left -->
					<rc-menu :menu_config="menu_config" :active_subscriber="active_subscriber" @change-current-tab="newCurrentTab" class="only-desktop"></rc-menu>

					<div class="rc_content">
						<!-- header -->
						<div class="rc-header" v-if="config_loaded">
							<div class="rc-header__content">
								<h3 class="rc-header__title heading z-h2">Bonjour <span class="capitalize rc-header__title-name">{customer_data.data.customer.firstName}</span></h3>
								<p class="rc_text only-desktop">Bienvenue dans votre espace personnel</p>
							</div>
						</div>

						<!-- Nav bar mobile -->
						<rc-menu :menu_config="menu_config" :active_subscriber="active_subscriber" @change-current-tab="newCurrentTab" class="only-mobile"></rc-menu>

						<!-- templates -->
						<div id="rc_content" v-if="config_loaded">
							<component v-bind:is="currentTab.replace(/^/,'rc-')" v-bind="config"></component>
						</div>
						<div v-else>
							<div class="rc_cart__loader-container">
								<div class="lds-dual-ring"></div>
							</div>
						</div>

					</div>
				</div>
			</div>
		</template>
	</div>
</section>

<script src="{{ 'rc-filters.js' | asset_url }}"></script>
<script>

	var menu_config = {{ shop.metafields.customer_portal.menu | json }};
	var pages_config = {{ shop.metafields.customer_portal.pages | json }};
	var general_config = {{ shop.metafields.customer_portal.general | json }};

	Vue.config.productionTip = false;
	Vue.config.devtools = true;
	Vue.prototype.$eventHub = new Vue(); // Global event bus

	new Vue({
    delimiters: ['{', '}'],
    el: '#app-rc',
		created() {
			this.$eventHub.$on('openModal', modal => {
				console.log(modal);
      	this.showModal = true
      	this.componentModal = modal.component
      	this.dataModal = modal.data
				document.getElementsByTagName('body')[0].style.overflow = 'hidden';
    	});
			this.$eventHub.$on('closeModal', modal => {
      	this.showModal = false
				this.componentModal = null
      	this.dataModal = null
				document.getElementsByTagName('body')[0].style.overflow = 'scroll';
    	});
			this.$eventHub.$on('showLoader', modal => {
      	this.showLoader()
    	});

			//RECHARGE REQUEST/MUTATION
			this.$eventHub.$on('set_quantity', data => {
				//this.showLoader();
				this.updateQuantity('{{ customer.metafields.subscriptions.customer_string }}', data.quantity, data.nextSubscriptionId, data.shopifyVariantId)
			});
			this.$eventHub.$on('cancel_product', data => {
				this.showLoader();
				for (var i = 0; i < data.subscriptionsIds.length; i++) {
					this.cancelProduct('{{ customer.metafields.subscriptions.customer_string }}', data.subscriptionsIds[i].old_address_id, data.subscriptionsIds[i].subscriptionIds, data)
				}
			});
			this.$eventHub.$on('delete_subscription', data => {
				this.showLoader();
				for (var i = 0; i < data.subscriptionsIds.length; i++) {
					this.deleteSubscriptions('{{ customer.metafields.subscriptions.customer_string }}', data.subscriptionsIds[i].old_address_id, data.subscriptionsIds[i].subscriptionIds)
				}
			});
			this.$eventHub.$on('deleteSubscriptions', data => {
				this.showLoader();
				for (var i = 0; i < data.subscriptionsIds.length; i++) {
					this.deleteSubscriptions('{{ customer.metafields.subscriptions.customer_string }}', data.subscriptionsIds[i].old_address_id, data.subscriptionsIds[i].subscriptionIds)
				}
			});
			this.$eventHub.$on('active_product', data => {
				this.showLoader();
				this.activeProduct('{{ customer.metafields.subscriptions.customer_string }}', data.SubscriptionId)
			});
			this.$eventHub.$on('skip_product', data => {
				this.showLoader();
				this.skipProduct('{{ customer.metafields.subscriptions.customer_string }}', data.nextSubscriptionId)
			});
			this.$eventHub.$on('edit_variant', data => {
				//this.showLoader();
				this.editVariant('{{ customer.metafields.subscriptions.customer_string }}', data.nextSubscriptionId, data.variantId)
			});
			this.$eventHub.$on('change_adresse', data => {
				this.showLoader();
				for (var i = 0; i < data.subscriptionsIds.length; i++) {
					this.updateAdresseSubscription('{{ customer.metafields.subscriptions.customer_string }}', data.subscriptionsIds[i].old_address_id, data.subscriptionsIds[i].subscriptionIds, data.address_id)
				}
			});
			this.$eventHub.$on('add_discount', data => {
				//this.showLoader();
				this.addDiscount('{{ customer.metafields.subscriptions.customer_string }}', data.discountCode, data.nextDeliveryAdresse)
			});
			this.$eventHub.$on('changeProduct', data => {
				this.showLoader();
				this.changeProduct('{{ customer.metafields.subscriptions.customer_string }}', data.next_date_schedule, data.nextSubscriptionId, data.variantId, data.orderIntervalFrequency, data.orderIntervalUnit)
			});
			this.$eventHub.$on('add_address', data => {
				this.showLoader();
				this.addAdresse('{{ customer.metafields.subscriptions.customer_string }}', data.data[0], data.subscriptionsIds)
			});
			this.$eventHub.$on('edit_address', data => {
				this.showLoader();
				this.updateAdresse('{{ customer.metafields.subscriptions.customer_string }}', data.data[0], data.addressId)
			});
			this.$eventHub.$on('edit_personals_informations', data => {
				this.showLoader();
				this.updatePersonalsInformations('{{ customer.metafields.subscriptions.customer_string }}', data.data[0])
			});
			this.$eventHub.$on('addSubscription', data => {
				this.showLoader();
				this.addSubscription('{{ customer.metafields.subscriptions.customer_string }}', data)
			});
			this.$eventHub.$on('set_next_charge_date', data => {
				//this.showLoader();
				for (var i = 0; i < data.subscriptionsIds.length; i++) {
					this.updateDate('{{ customer.metafields.subscriptions.customer_string }}', data.subscriptionsIds[i].old_address_id, data.subscriptionsIds[i].subscriptionIds, data.date)
				}
			});
			this.$eventHub.$on('changeDateAndFrequency', data => {
				//this.showLoader();
				for (var i = 0; i < data.subscriptionsIds.length; i++) {
					this.changeDateAndFrequency('{{ customer.metafields.subscriptions.customer_string }}', data.subscriptionsIds[i].old_address_id, data.subscriptionsIds[i].subscriptionIds, data)
				}
			});

			//SHOPIFY REQUEST/MUTATION
			this.$eventHub.$on('edit_address_shopify', data => {
				this.showLoader();
				console.log(data);
				this.updateAddressShopify(data.data[0], data.addressId);
			});
			this.$eventHub.$on('edit_personals_informations_shopify', data => {
				this.showLoader();
				console.log(data);
				this.updatePersonalsInformationsShopify(data.data[0]);
			});
			this.$eventHub.$on('add_address_shopify', data => {
				this.showLoader();
				console.log(data);
				this.addAddressShopify(data.data[0]);
			});
		},
    data: function () {
      return {
				config: [],
				config_loaded: false,
				data_update: false,
        menu_config: menu_config,
        general_config: general_config,
        pages_config: pages_config,
        shopify_data: null,
        dataModal: null,
        componentModal: null,
        showModal: false,
        dataAlert: null,
				currentTab: menu_config.menu.configurations[0].id,
				userLogged: false,
				active_subscriber: false,
      }
    },
		async mounted () {
			if(getCookie('customerAccessToken')){
				this.userLogged = true;
				await getCustomerData();
				console.log(customer_data.data.customer.tags.includes('Active Subscriber'));
				console.log(customer_data.data.customer.tags.includes('Subscription card declined'));
				this.config.push({'shopify_data': customer_data });
				this.config.push({'general_config': general_config });
				this.config.push({'pages_config': pages_config });
				if (customer_data.data.customer.tags.includes('Active Subscriber') || customer_data.data.customer.tags.includes('Subscription card declined') || customer_data.data.customer.tags.includes('Inactive Subscriber')) {
					this.config.push({'Active_Subscriber': true });
					this.active_subscriber = true;
					this.getRechargeData('{{ customer.metafields.subscriptions.customer_string }}');
				} else {
					this.config.push({'Active_Subscriber': false });
					this.config_loaded = true;
				}
			}
		},
    methods: {
			showLoader: function () {
				this.showModal = true;
				this.componentModal = 'loader';
			},
			newCurrentTab: function (value) {
	      this.currentTab = value;
    	},
			closeModal: function (value) {
				this.showModal = false
				this.componentModal = null
      	this.dataModal = null
				document.getElementsByTagName('body')[0].style.overflow = 'scroll';
			},
			getRechargeData: function (userId) {
				const url = '/tools/recurring/portal/'+userId+'/request_objects';
				const myData = {
					schema: '{ "subscriptions": { "products": {} }, "discounts": [], "charges": [], "schedule": [], "addresses": [], "customer": {}, "settings": {}, "payment_sources": [], "products": {}, "products_count": {}, "orders": [], "delivery_schedule": [] }'
				};
				axios.get(url, { params: myData }).then(response => {
					this.config.push({'recharge_data': response.data });
					this.config_loaded = true;
					console.log(response.data);
					this.$eventHub.$emit('getRechargeData', response.data);
				}).catch(function (error) {
					console.log(error);
				})
			},
			updateAdresseSubscription: function (userId, old_address_id, subscriptionIds, address_id) {
				const url = '/tools/recurring/portal/'+userId+'/addresses/' + old_address_id + '/subscriptions-bulk-update';
				const myData = {
					"subscriptions":[]
				};
				for (var i = 0; i < subscriptionIds.length; i++) {
					myData.subscriptions.push({
						id: subscriptionIds[i],
						address_id: address_id
					});
				}
				var self = this;

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.updateAdresseSubscription.success, 'success');
				}).catch(function (error) {
					console.log(error);
					self.ShowAlert(self.general_config.alerts.updateAdresseSubscription.error, 'error');
					self.closeModal();
				})

			},
			updateDate(userId, old_address_id, subscriptionIds, date) {
				const url = '/tools/recurring/portal/'+userId+'/addresses/' + old_address_id + '/subscriptions-bulk-update';
				const myData = {
					"subscriptions":[]
				};
				for (var i = 0; i < subscriptionIds.length; i++) {
					myData.subscriptions.push({
						id: subscriptionIds[i],
						next_charge_scheduled_at: date
					});
				}
				var self = this;

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.updateDate.success, 'success');
				}).catch(function (error) {
					console.log(error);
					self.ShowAlert(self.general_config.alerts.updateDate.error, 'error');
					self.closeModal();
				})
			},
			editVariant: function (userId, subscriptionId, variantId) {
				const url = '/tools/recurring/portal/'+userId+'/subscriptions/'+subscriptionId;
				const myData = {
					shopify_variant_id: variantId
				};
				var self = this;

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.editVariant.success, 'success');
				}).catch(function (error) {
					console.log(error);
					self.ShowAlert(self.general_config.alerts.editVariant.error, 'error');
					self.closeModal();
				})
			},
			updateQuantity: function (userId, quantity, subscriptionId, shopifyVariantId) {
				const url = '/tools/recurring/portal/'+userId+'/subscriptions/'+subscriptionId+'/swap';
				const myData = {
					shopify_variant_id: shopifyVariantId,
    			quantity: quantity
				};
				var self = this;

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					self.$eventHub.$emit('submitSuccess');
					this.ShowAlert(self.general_config.alerts.updateQuantity.success, 'success');
				}).catch(function (error) {
					console.log(error);
					self.ShowAlert(self.general_config.alerts.updateQuantity.error, 'error');
					self.closeModal();
				})
			},
			changeDateAndFrequency: function (userId, old_address_id, subscriptionIds, data) {
				const url = '/tools/recurring/portal/'+userId+'/addresses/' + old_address_id + '/subscriptions-bulk-update';
				const myData = {
					"subscriptions":[]
				};
				for (var i = 0; i < subscriptionIds.length; i++) {
					myData.subscriptions.push({
						id: subscriptionIds[i],
						charge_interval_frequency: data.charge_interval_frequency,
	    			order_interval_frequency: data.charge_interval_frequency,
	    			order_interval_unit: data.interval_unit_type,
	    			next_charge_scheduled_at: data.next_charge_scheduled_at
					});
				}
				var self = this;

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.changeDateAndFrequency.success, 'success');
				}).catch(function (error) {
					console.log(error);
					self.ShowAlert(self.general_config.alerts.changeDateAndFrequency.error, 'error');
					self.closeModal();
				})
			},
			cancelProduct: function (userId, old_address_id, subscriptionIds, data) {
				const url = '/tools/recurring/portal/'+userId+'/addresses/' + old_address_id + '/subscriptions-bulk-update';
				const myData = {
					"subscriptions":[]
				};
				for (var i = 0; i < subscriptionIds.length; i++) {
					myData.subscriptions.push({
						id: subscriptionIds[i],
            status: "CANCELLED",
						cancellation_reason: data.cancellation_reason,
	    			cancellation_reason_comments: data.cancellation_reason_comments,
					});
				}

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.cancelProduct.success, 'success');
				}).catch(function (error) {
					console.log(error);
					self.ShowAlert(self.general_config.alerts.cancelProduct.error, 'error');
					self.closeModal();
				})
			},
			cancelProduct2: function (userId, subscriptionId, data) {
				const url = '/tools/recurring/portal/'+userId+'/subscriptions/'+subscriptionId+'/cancel';
				const myData = {
					cancellation_reason: data.cancellation_reason,
    			cancellation_reason_comments: data.cancellation_reason_comments,
				};
				var self = this;

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.cancelProduct.success, 'success');
				}).catch(function (error) {
					console.log(error);
					self.ShowAlert(self.general_config.alerts.cancelProduct.error, 'error');
					self.closeModal();
				})
			},
			activeProduct: function (userId, subscriptionId) {
				const url = '/tools/recurring/portal/'+userId+'/subscriptions/'+subscriptionId+'/activate';
				var self = this;

				axios.post(url).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.activeProduct.success, 'success');
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.activeProduct.error, 'error');
					self.closeModal();
					console.log(error);
				})
			},
			skipProduct: function (userId, subscriptionId) {
				const url = '/tools/recurring/portal/'+userId+'/subscriptions/'+subscriptionId+'/skip?preview_theme=7529';
				var self = this;

				axios.post(url).then(response => {
					console.log(response);
					this.ShowAlert(self.general_config.alerts.skipProduct.success, 'success');
					//this.config_loaded = false;
					//this.closeModal();
					this.$eventHub.$emit('submitSuccess', response.data);
					this.getRechargeData(userId);
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.skipProduct.error, 'error');
					self.closeModal();
					console.log(error);
				})
			},
			addDiscount: function (userId, discountCode, addressId) {
				const url = '/tools/recurring/portal/'+userId+'/addresses/'+addressId+'/apply_discount';
				const myData = {
					discount_code: discountCode
				};
				var self = this;
				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.addDiscount.success, 'success');
				}).catch(function (error) {
					self.closeModal();
					self.ShowAlert(self.general_config.alerts.addDiscount.error, 'error');
				})
			},
			changeProduct: function (userId, next_date_schedule, subscriptionId, variantId, orderIntervalFrequency, orderIntervalUnit) {
				const url = '/tools/recurring/portal/'+userId+'/subscriptions/'+subscriptionId;
				const myData = {
					shopify_variant_id: variantId,
					order_interval_frequency: orderIntervalFrequency,
    			order_interval_unit: orderIntervalUnit,
					charge_interval_frequency: orderIntervalFrequency,
					next_charge_scheduled_at: next_date_schedule
				};
				var self = this;

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.changeProduct.success, 'success');
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.changeProduct.error, 'error');
					self.closeModal();
					console.log(error);
				})
			},
			addAdresse: function (userId, data, subscriptionIds) {
				const url = '/tools/recurring/portal/'+userId+'/addresses/';
				const myData = {
					address1: data.address,
			    address2: data.address_2,
			    city: data.city,
			    country: data.country,
			    first_name: data.firstname,
			    last_name: data.lastname,
			    province: null,
			    phone: data.phone,
			    zip: data.zip
				};
				var self = this;

				axios.post(url, myData).then(response => {
					if (data.set_address_default) {
						for (var i = 0; i < subscriptionIds.length; i++) {
							var old_address_id = subscriptionIds[i].old_address_id;
							var address_id = response.data.address.id;
							this.updateAdresseSubscription('{{ customer.metafields.subscriptions.customer_string }}', old_address_id, subscriptionIds[i].subscriptionIds, address_id);
						}
					} else {
						//this.config_loaded = false;
						//this.closeModal();
						this.getRechargeData(userId);
						this.$eventHub.$emit('submitSuccess', response.data);
						this.ShowAlert(self.general_config.alerts.addAdresse.success, 'success');
						console.log(response);
					}
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.addAdresse.error, 'error');
					self.closeModal();
					console.log(error);
				})
			},
			updateAdresse: function (userId, data, addressId) {
				const url = '/tools/recurring/portal/'+userId+'/addresses/'+addressId;
				const myData = {
					address1: data.address,
			    address2: data.address_2,
			    city: data.city,
			    country: data.country,
			    first_name: data.firstname,
			    last_name: data.lastname,
			    province: null,
			    phone: data.phone,
			    zip: data.zip
				};
				var self = this;

				axios.post(url, myData).then(response => {
					//this.config_loaded = false;
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					//this.closeModal();
					this.ShowAlert(self.general_config.alerts.updateAdresse.success, 'success');
					console.log(response);
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.updateAdresse.error, 'error');
					self.closeModal();
					console.log(error);
				})
			},
			updatePersonalsInformations: function (userId, data) {
				const url = '/tools/recurring/portal/'+userId+'/customer/';
				const myData = {
					first_name: data.firstname,
			   	last_name: data.lastname,
			   	email: data.email
				};
				var self = this;

				axios.post(url, myData).then(response => {
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.updatePersonalsInformations.success, 'success');
					console.log(response);
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.updatePersonalsInformations.error, 'error');
					self.closeModal();
					console.log(error);
				})
			},
			addSubscription: function (userId, data) {
				const url = '/tools/recurring/portal/'+userId+'/subscriptions';
				const myData = {
					shopify_variant_id: data.variantId,
					is_subscription_item: 1,
			    order_interval_frequency: data.orderIntervalFrequency,
			    order_interval_unit: data.orderIntervalUnit,
			    charge_interval_frequency: data.orderIntervalFrequency,
			    next_charge_scheduled_at: data.date,
			    address_id: data.addressId,
			    quantity: data.quantity
				};
				var self = this;

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.addSubscription.success, 'success');
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.addSubscription.error, 'error');
					self.closeModal();
					console.log(error);
				})
			},
			deleteSubscriptions: function (userId, addressId, subscriptionIds) {
				const url = 'https://u6g7bv40q7.execute-api.us-east-1.amazonaws.com/prod/subscriptions/delete';
				const app = document.getElementById("app-rc");
				const myData = {
					"secret": app.getAttribute("data-subscription"),
					"customer_id": {{customer.id}},
					"address_id": addressId,
					"subscriptions":[],
					"shop_origin": '{{ shop.permanent_domain }}'
				};
				for (var i = 0; i < subscriptionIds.length; i++) {
					myData.subscriptions.push({
						id: subscriptionIds[i]
					});
				}
				console.log(myData);

				var self = this;

				axios.post(url, myData).then(response => {
					console.log(response);
					//this.config_loaded = false;
					//this.closeModal();
					this.getRechargeData(userId);
					this.$eventHub.$emit('submitSuccess', response.data);
					this.ShowAlert(self.general_config.alerts.deleteSubscriptions.success, 'success');
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.deleteSubscriptions.error, 'error');
					self.closeModal();
					console.log(error);
				})
			},
			ShowAlert: function (msg, type) {
				this.$toastr.Add({
				  title: '<svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>',
				  msg: msg,
					position: 'toast-top-right',
				  clickClose: true,
				  type: type,
					progressbar: false
				});
			},
			updateAddressShopify: function (address, addressID) {
		    const registerQuery = `mutation customerAddressUpdate($customerAccessToken: String!, $id: ID!, $address: MailingAddressInput!) {
		        customerAddressUpdate(customerAccessToken: $customerAccessToken, id: $id, address: $address) {
		            customerAddress {
		                id
		            }
		            customerUserErrors {
		                code
		                field
		                message
		            }
		        }
		    }
		    `;

		    const params = {
		        query : registerQuery,
		        variables : {
		            customerAccessToken : getCookie('customerAccessToken'),
		            id : addressID,
		            address : {
		                address1 : address.address,
		                address2 : address.address_2,
		                city : address.city,
		                country : address.country,
		                firstName : address.firstname,
		                lastName : address.lastname,
		                phone : address.phone,
		                zip : address.zip,
		            }
		        }
		    };

		    const optionsQuery = {
		        method: "post",
		        headers: {
		            "Content-Type": "application/json",
		            "Accept": "application/json",
		            "X-Shopify-Storefront-Access-Token": 'f30850f961aadcf23f39666a3041d658'
		        },
		        body: JSON.stringify(params)
		    };

				var self = this;

				return fetch(`/api/graphql`, optionsQuery)
				.then(res => res.json())
				.then(function(response) {
					console.log(response);
					self.closeModal();
					self.config_loaded = false;
					window.scrollTo(0,0);
					return getCustomerData();
				}).then(function(response) {
					console.log(response);
					self.config.push({'shopify_data': customer_data });
					self.$eventHub.$emit('submitSuccess');
					setTimeout(() => self.config_loaded = true, 2000);
					self.ShowAlert(self.general_config.alerts.updateAdresse.success, 'success');
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.updateAdresse.error, 'error');
					self.closeModal();
					console.log(error);
				});
			},
			updatePersonalsInformationsShopify: function (customer) {
		    const registerQuery = `mutation customerUpdate($customerAccessToken: String!, $customer: CustomerUpdateInput!) {
				  customerUpdate(customerAccessToken: $customerAccessToken, customer: $customer) {
				    customer {
				      id
				    }
				    customerAccessToken {
				      accessToken
				      expiresAt
				    }
				    customerUserErrors {
				      code
				      field
				      message
				    }
				  }
				}
		    `;

		    const params = {
		        query : registerQuery,
		        variables : {
		            customerAccessToken : getCookie('customerAccessToken'),
		            customer : {
		                firstName : customer.firstname,
		                lastName : customer.lastname,
										acceptsMarketing: customer.acceptsMarketing
		            }
		        }
		    };

		    const optionsQuery = {
		        method: "post",
		        headers: {
		            "Content-Type": "application/json",
		            "Accept": "application/json",
		            "X-Shopify-Storefront-Access-Token": 'f30850f961aadcf23f39666a3041d658'
		        },
		        body: JSON.stringify(params)
		    };

				var self = this;

				return fetch(`/api/graphql`, optionsQuery)
				.then(res => res.json())
				.then(function(response) {
					console.log(response);
					self.closeModal();
					self.config_loaded = false;
					window.scrollTo(0,0);
					return getCustomerData();
				}).then(function(response) {
					console.log(response);
					self.config.push({'shopify_data': customer_data });
					self.$eventHub.$emit('submitSuccess');
					setTimeout(() => self.config_loaded = true, 2000);
					self.ShowAlert(self.general_config.alerts.updateAdresse.success, 'success');
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.updatePersonalsInformations.error, 'error');
					self.closeModal();
					console.log(error);
				});
			},
			addAddressShopify: function (address) {
		    const registerQuery = `mutation customerAddressCreate($customerAccessToken: String!, $address: MailingAddressInput!) {
				  customerAddressCreate(customerAccessToken: $customerAccessToken, address: $address) {
				    customerAddress {
				      id
				    }
				    customerUserErrors {
				      code
				      field
				      message
				    }
				  }
				}
		    `;

		    const params = {
		        query : registerQuery,
		        variables : {
		            customerAccessToken : getCookie('customerAccessToken'),
		            address : {
									address1 : address.address,
									address2 : address.address_2,
									city : address.city,
									country : address.country,
									firstName : address.firstname,
									lastName : address.lastname,
									phone : address.phone,
									zip : address.zip,
		            }
		        }
		    };

		    const optionsQuery = {
		        method: "post",
		        headers: {
		            "Content-Type": "application/json",
		            "Accept": "application/json",
		            "X-Shopify-Storefront-Access-Token": 'f30850f961aadcf23f39666a3041d658'
		        },
		        body: JSON.stringify(params)
		    };

				var self = this;

				return fetch(`/api/graphql`, optionsQuery)
				.then(res => res.json())
				.then(function(response) {
					console.log(response);
					self.closeModal();
					self.config_loaded = false;
					window.scrollTo(0,0);
					return getCustomerData();
				}).then(function(response) {
					console.log(response);
					self.config.push({'shopify_data': customer_data });
					self.$eventHub.$emit('submitSuccess');
					setTimeout(() => self.config_loaded = true, 2000);
					self.ShowAlert(self.general_config.alerts.updateAdresse.success, 'success');
				}).catch(function (error) {
					self.ShowAlert(self.general_config.alerts.addAdresse.error, 'error');
					self.closeModal();
					console.log(error);
				});
			},
		},
  	filters: commonsFilters
  })

	//TEMPLATES

	Vue.component('rc-subscriptions', {
	    data: function () {
	      return {
	        rechargeData: this.$attrs.recharge_data,
	        pages_config_subscriber: this.$attrs.pages_config.pages_subscriber,
	        pages_config_nosubscriber: this.$attrs.pages_config.pages_nosubscriber,
					data: {
						'Active_Subscriber': this.$attrs.Active_Subscriber,
						'general_config': this.$attrs.general_config,
						'pages_config': this.$attrs.pages_config,
						'recharge_data': this.$attrs.recharge_data,
						'shopify_data': this.$attrs.shopify_data,
					}
	      }
	    },
			created() {
				//do something after creating vue instance
				console.log(this.data);
				this.$eventHub.$on('getRechargeData', data => {
					this.$eventHub.$emit('closeModal');
					this.data.recharge_data = data;
				})
			},
	    computed: {
	      _page_config_subscriber: function () {
	        var pageConfig;
	        for (var i = 0; i < this.pages_config_subscriber.length; i++) {
	          if (this.pages_config_subscriber[i].id == "subscriptions") {
	            pageConfig = this.pages_config_subscriber[i].components;
	          }
	        }
	        return pageConfig;
	      },
	      _pages_config_nosubscriber: function () {
	        var pageConfig;
	        for (var i = 0; i < this.pages_config_nosubscriber.length; i++) {
	          if (this.pages_config_nosubscriber[i].id == "subscriptions") {
	            pageConfig = this.pages_config_nosubscriber[i].components;
	          }
	        }
	        return pageConfig;
	      },
	    },
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <ul class="rc-orders__list">
	      <template v-if="data.Active_Subscriber">
	        <template v-for="component in _page_config_subscriber">
	          <component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type" :source="'shopify'"></component>
	        </template>
	      </template>
	      <template v-else>
	        <template v-for="component in _pages_config_nosubscriber">
	          <component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type" :source="'shopify'"></component>
	        </template>
	      </template>
	    </ul>
	    `
	    })

	Vue.component('rc-payment_methods', {
	    data: function () {
	      return {
	        rechargeData: this.$attrs.recharge_data,
	        pages_config: this.$attrs.pages_config.pages_subscriber,
	        data: this.$attrs
	      }
	    },
	    computed: {
	      _page_config: function () {
	        var pageConfig;
	        for (var i = 0; i < this.pages_config.length; i++) {
	          if (this.pages_config[i].id == "payment_methods") {
	            pageConfig = this.pages_config[i].components;
	          }
	        }
	        return pageConfig;
	      }
	    },
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <ul class="rc-orders__list">
	      <template v-if="data.Active_Subscriber">
	        <template v-for="component in _page_config">
	          <component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type"></component>
	        </template>
	      </template>
	      <li v-else>
	        <h1>
	          Utilisateur non abonné
	        </h1>
	      </li>
	    </ul>
	    `
	    })

	Vue.component('rc-orders_history', {
			data: function () {
				return {
					rechargeData: this.$attrs.recharge_data,
					shopifyData: this.$attrs.shopify_data.data,
					pages_config_subscriber: this.$attrs.pages_config.pages_subscriber,
					pages_config_nosubscriber: this.$attrs.pages_config.pages_nosubscriber,
					data: this.$attrs
				}
			},
			computed: {
				_page_config_subscriber: function () {
					var pageConfig;
					for (var i = 0; i < this.pages_config_subscriber.length; i++) {
						if (this.pages_config_subscriber[i].id == "orders_history") {
							pageConfig = this.pages_config_subscriber[i].components;
						}
					}
					return pageConfig;
				},
				_pages_config_nosubscriber: function () {
					var pageConfig;
					for (var i = 0; i < this.pages_config_nosubscriber.length; i++) {
						if (this.pages_config_nosubscriber[i].id == "orders_history") {
							pageConfig = this.pages_config_nosubscriber[i].components;
						}
					}
					return pageConfig;
				},
			},
			delimiters: ['((', '))'],
			filters: commonsFilters,
			template:  `
			<ul class="rc-orders__list">
				<template v-if="data.Active_Subscriber">
					<template v-for="component in _page_config_subscriber">
						<component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type" :source="'shopify'"></component>
					</template>
				</template>
				<template v-else>
					<template v-for="component in _pages_config_nosubscriber">
						<component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type" :source="'shopify'"></component>
					</template>
				</template>
			</ul>
			`
			})

	Vue.component('rc-menu', {
	    data: function () {
	      return {
	        currentTab: this.menu_config.menu.configurations[0].id,
					optionSelected: this.menu_config.menu.configurations[0],
	      }
	    },
	    methods: {
	      changeCurrentTab (tab) {
	        if (tab.type == 0) {
	          this.currentTab = tab.id;
	          this.$emit('change-current-tab', tab.id)
	        } else if (tab.type == 1) {

	        } else if (tab.type == 2) {
	          window.location = tab.path;
	        } else if (tab.type == 3) {
	          window.open(tab.path, '_blank');
	        }
					if (screen.width < 960) {
						var id = 'rc_content';
						var yOffset = -30;
						var element = document.getElementById(id);
						var y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

						window.scrollTo({top: y, behavior: 'smooth'});
					}
	      },
				changeCurrentTabMobile () {
		        if (this.optionSelected.type == 0) {
		          this.currentTab = this.optionSelected.id;
		          this.$emit('change-current-tab', this.optionSelected.id)
		        } else if (this.optionSelected.type == 1) {

		        } else if (this.optionSelected.type == 2) {
		          window.location = this.optionSelected.path;
		        } else if (this.optionSelected.type == 3) {
		          window.open(this.optionSelected.path, '_blank');
		        }
						if (screen.width < 960) {
							var id = 'rc_content';
							var yOffset = -130;
							var element = document.getElementById(id);
							var y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

							window.scrollTo({top: y, behavior: 'smooth'});
						}
					},
	    },
	    created() {
	      this.$eventHub.$on('displayPayement', (event) => {
	        this.$emit('change-current-tab', 'payment_methods')
	        this.currentTab = 'payment_methods';
	      })
	    },
	    props: ['menu_config', 'active_subscriber'],
	    delimiters: ['((', '))'],
	    template:  `
	    <div class="rc_nav_bar">
	      <ul class="rc_nav_bar__links">
	        <li class="rc_nav_bar__link">
	          <h2 class="rc_nav_bar__title heading z-h7" v-if="active_subscriber">((menu_config.menu.title_subscriber))</h2>
	          <h2 class="rc_nav_bar__title heading z-h7" v-else>((menu_config.menu.title))</h2>
	        </li>
	        <template v-if="active_subscriber">
	          <li v-for="link in menu_config.menu.configurations" :key="link.key" class="rc_nav_bar__link" @click="changeCurrentTab(link)" v-if="link.scope != 1">
	            <button type="button" name="button" v-bind:class="{'is-active': currentTab == link.id}" class="rc_nav_bar__button" :data-template-type="((link.type))" :data-template-scope="((link.scope))" :data-template-path="((link.path))">
	              <img class="rc_nav_bar__logo" :src="((link.icon))" :alt="((link.labels))">
	              <span v-if="link.labels.fr">((link.labels.fr))</span>
	              <span v-else>((link.labels))</span>
	            </button>
	          </li>
	        </template>
	        <template v-else>
	          <li v-for="link in menu_config.menu.configurations" :key="link.key" class="rc_nav_bar__link" @click="changeCurrentTab(link)" v-if="link.scope != 2">
	            <button type="button" name="button" v-bind:class="{'is-active': currentTab == link.id}" class="rc_nav_bar__button" :data-template-type="((link.type))" :data-template-scope="((link.scope))" :data-template-path="((link.path))">
	              <img class="rc_nav_bar__logo" :src="((link.icon))" :alt="((link.labels))">
	              <span v-if="link.labels.fr">((link.labels.fr))</span>
	              <span v-else>((link.labels))</span>
	            </button>
	          </li>
	        </template>
	      </ul>
	    </div>
	    `
	    })

	Vue.component('rc-informations', {
	    data: function () {
	      return {
	        rechargeData: this.$attrs.recharge_data,
	        pages_config_subscriber: this.$attrs.pages_config.pages_subscriber,
	        pages_config_nosubscriber: this.$attrs.pages_config.pages_nosubscriber,
	        data: this.$attrs
	      }
	    },
	    computed: {
	      _page_config_subscriber: function () {
	        var pageConfig;
	        for (var i = 0; i < this.pages_config_subscriber.length; i++) {
	          if (this.pages_config_subscriber[i].id == "informations") {
	            pageConfig = this.pages_config_subscriber[i].components;
	          }
	        }
	        return pageConfig;
	      },
	      _pages_config_nosubscriber: function () {
	        var pageConfig;
	        for (var i = 0; i < this.pages_config_nosubscriber.length; i++) {
	          if (this.pages_config_nosubscriber[i].id == "informations") {
	            pageConfig = this.pages_config_nosubscriber[i].components;
	          }
	        }
	        return pageConfig;
	      },
	    },
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div>
	      <template v-if="data.Active_Subscriber">
	        <template v-for="component in _page_config_subscriber">
	          <component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type" :source="'recharge'"></component>
	        </template>
	      </template>
	      <template v-else>
	        <template v-for="component in _pages_config_nosubscriber">
	          <component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type" :source="'shopify'"></component>
	        </template>
	      </template>
	    </div>
	    `
	    })

	Vue.component('rc-delivery_methods', {
	    data: function () {
	      return {
	        rechargeData: this.$attrs.recharge_data,
	        pages_config: this.$attrs.pages_config.pages_subscriber,
	        data: this.$attrs
	      }
	    },
	    computed: {
	      _page_config: function () {
	        var pageConfig;
	        for (var i = 0; i < this.pages_config.length; i++) {
	          if (this.pages_config[i].id == "delivery_methods") {
	            pageConfig = this.pages_config[i].components;
	          }
	        }
	        return pageConfig;
	      }
	    },
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <ul class="rc-orders__list">
	      <template v-if="data.Active_Subscriber">
	        <template v-for="component in _page_config">
	          <component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type"></component>
	        </template>
	      </template>
	      <li v-else>
	        <h1>
	          Utilisateur non abonné
	        </h1>
	      </li>
	    </ul>
	    `
	    })

	Vue.component('rc-addresses', {
		  data: function () {
		    return {
		      pages_config_subscriber: this.$attrs.pages_config.pages_subscriber,
		      pages_config_nosubscriber: this.$attrs.pages_config.pages_nosubscriber,
		      data: {
						'Active_Subscriber': this.$attrs.Active_Subscriber,
						'general_config': this.$attrs.general_config,
						'pages_config': this.$attrs.pages_config,
						'recharge_data': this.$attrs.recharge_data,
						'shopify_data': this.$attrs.shopify_data,
					}
		    }
		  },
			computed: {
				_page_config_subscriber: function () {
					var pageConfig;
					for (var i = 0; i < this.pages_config_subscriber.length; i++) {
						if (this.pages_config_subscriber[i].id == "addresses") {
							pageConfig = this.pages_config_subscriber[i].components;
						}
					}
					return pageConfig;
				},
				_pages_config_nosubscriber: function () {
					var pageConfig;
					for (var i = 0; i < this.pages_config_nosubscriber.length; i++) {
						if (this.pages_config_nosubscriber[i].id == "addresses") {
							pageConfig = this.pages_config_nosubscriber[i].components;
						}
					}
					return pageConfig;
				},
			},
			created() {
			  //do something after creating vue instance
				console.log(this.data);
				this.$eventHub.$on('getRechargeData', data => {
					this.$eventHub.$emit('closeModal');
					this.data.recharge_data = data;
				})
			},
		  delimiters: ['((', '))'],
		  filters: commonsFilters,
		  template:  `
		  <div>
				<template v-if="data.Active_Subscriber">
					<template v-for="component in _page_config_subscriber">
						<component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type" :source="'recharge'"></component>
					</template>
				</template>
				<template v-else>
					<template v-for="component in _pages_config_nosubscriber">
						<component v-bind:is="component.block_type.replace(/^/,'rc-')" :data="data" :component="component" :key="component.block_type" :source="'shopify'"></component>
					</template>
				</template>
		  </div>
		  `
		  })

	//SECTIONS

	Vue.component('rc-add_address', {
			data: function () {
				return {
					rechargeData: this.config.recharge_data,
					modals_config: this.config.pages_config.modals,
					shopifyData: this.config.shopify_data,
					value: "",
					formAdress: [
						{
							firstname: null,
							lastname: null,
							address: null,
							address_2: null,
							phone: null,
							zip: null,
							city: null,
							country: null,
							set_address_default: false,
							set_address_billing: false
						}
					]
				}
			},
			computed: {
				form_config: function () {
					var form_config;
					for (var i = 0; i < this.modals_config.length; i++) {
						if (this.modals_config[i].id == "add_address") {
							form_config = this.modals_config[i].components[0];
						}
					}
					return form_config;
				}
			},
			methods: {
				input_callback($event, data) {
					this.$set(this.formAdress[0], $event.inputName, $event.value);
				},
				submit() {
					if (this.formAdress[0].firstname == null ||
							this.formAdress[0].lastname == null ||
							this.formAdress[0].address == null ||
							this.formAdress[0].zip == null ||
							this.formAdress[0].city == null ||
							this.formAdress[0].country == null) {
								this.$toastr.Add({
									title: '<svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>',
									msg: this.config.general_config.alerts.formFieldRequired.error,
									position: 'toast-top-right',
									clickClose: true,
									type: 'error',
									progressbar: false
								});
					} else {
						if (this.config.Active_Subscriber) {
							this.$eventHub.$emit('add_address', { data: this.formAdress, subscriptionsIds: this.data.subscriptionsIds })
						} else {
							this.$eventHub.$emit('add_address_shopify', { data: this.formAdress, subscriptionsIds: this.data.subscriptionsIds })
						}
					}
				}
			},
			props: ['data', 'config'],
			delimiters: ['((', '))'],
			filters: commonsFilters,
			template:  `
			<div class="rc-modal__content-wrapper">
				<h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
				<p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
				<p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
				<hr v-if="form_config.configurations.hr.show">
				<p class="rc-input__label" v-if="form_config.configurations.subtitle_2.show">((form_config.configurations.subtitle_2.label))</p>
				<p v-if="form_config.configurations.description_2.show">((form_config.configurations.description_2.label))</p>
				<div class="grid">
					<template v-for="input in form_config.item_level_options[0].inputs" :key="input.key">
						<div class="grid__cell contact__field" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
							<template v-if="input.block_type =='checkbox'">
								<component v-if="data.showCheckbox" v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :value="input.settings.value" v-on:input_callback="input_callback($event, data)"  :options="input.settings" :key="input.block_type"></component>
							</template>
							<template v-if="input.block_type =='select'">
								<rc-select v-if="input.block_type == 'select'" :optionSelected="formAdress[0][input.settings.name]" :options="input.settings.options" :block="input" v-on:input_callback="input_callback($event, data)" class="mtm10"></rc-select>
							</template>
							<template v-if="input.block_type =='input'">
								<component v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :value="input.settings.value" v-on:input_callback="input_callback($event, data)"  :options="input.settings" :key="input.block_type"></component>
							</template>
						</div>
					</template>
					<template v-for="input in form_config.item_level_options[0].submit" :key="input.key">
						<div class="grid__cell" v-bind:class="{ 'contact__field-left': input.position == 'left', 'contact__field-center': input.position == 'center', 'contact__field-right': input.position == 'right' }">
							<component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :options="input.settings" :key="input.block_type" @click.native="submit()">((input.settings.label))</component>
						</div>
					</template>
				</div>
			</div>
			`
			})

	Vue.component('rc-add_product_subscribe', {
	    data: function () {
	      return {
	        rechargeData: this.config.recharge_data,
	        modals_config: this.config.pages_config.modals,
	        shopifyData: this.config.shopify_data,
	        filter1: 'none',
	        filter2: 'none',
	        products: this.config.recharge_data.products,
	        productSelected: null,
	        priceSelected: null,
	        variantSelected: null,
	        frequencySelected: null,
	        frequencyUnitSelected: null,
	        quantitySelected: 1,
	        dateSelected2: null
	      }
	    },
	    methods: {
	      selectProduct(_product) {
	        this.priceSelected = _product.shopify_details.variants[0].price;
	        this.variantSelected = _product.shopify_details.variants[0].shopify_id;
	        this.productSelected = _product;
	        this.frequencyArray = _product.subscription_defaults.order_interval_frequency_options;
	        this.frequencySelected = 30;
	        this.frequencyUnitSelected = _product.subscription_defaults.order_interval_unit;
	        this.dateSelected2 = this.dateSelected;
	        var event = document.createEvent("Event");
	        event.initEvent("initQuickviewHandle", false, true);
	        window.dispatchEvent(event);
	      },
	      unselectProduct() {
	        this.priceSelected = null;
	        this.productSelected = null;
	        this.variantSelected = null;
	        this.frequencySelected = null;
	        this.frequencyUnitSelected = null;
	      },
	      changeVariant($event) {
	        this.variantSelected = $event.variantId;
	        this.priceSelected = $event.price;
	      },
	      changeFrequency($event) {
	        this.frequencySelected = $event.frequency;
	      },
	      changeDate($event) {
	        this.dateSelected2 = $event.date;
	      },
	      changeQuantity($event) {
	        this.quantitySelected = $event.quantity;
	      },
	      addSubscription() {
	        this.$eventHub.$emit('addSubscription', { variantId: this.variantSelected, orderIntervalFrequency: this.frequencySelected, orderIntervalUnit: this.frequencyUnitSelected, quantity: this.quantitySelected, date: commonsFilters.dateFormatterRecharge(this.dateSelected2), addressId: this.adressSelected })
	      }
	    },
	    computed: {
				adressSelected() {
					if (this.config.recharge_data.schedule.length != 0) {
						return this.config.recharge_data.schedule[0].orders[0].charge.address_id
					} else {
						return this.config.recharge_data.addresses[0].id
					}
				},
	      dateSelected() {
	        let today = new Date();
	        let nextWeek = today.setDate(today.getDate() + 7);
	        nextWeek = new Date(nextWeek);
	        return nextWeek;
	      },
	      frequency: function () {
	        if (this.frequencyArray.length > 0) {
	          var frequency = [];
	          for (var i = 0; i < this.frequencyArray.length; i++) {
	            frequency.push({
	              value: this.frequencyArray[i],
	              text: this.frequencyArray[i] + ' ' + commonsFilters.dateUnitFormatter(this.frequencyUnitSelected)
	            })
	          }
	          return frequency;
	        }
	      },
	      form_config: function () {
	        var form_config;
	        for (var i = 0; i < this.modals_config.length; i++) {
	          if (this.modals_config[i].id == "add_product_subscribe") {
	            form_config = this.modals_config[i].components[0];
	          }
	        }
	        return form_config;
	      },
	      filteredProducts: function () {
	        if (this.config.general_config.filters_products.doubleFilters) {
	          if (this.filter1 == 'none' && this.filter2 == 'none') {
	            return this.products;
	          } else if (this.filter1 != 'none' && this.filter2 == 'none') {
	            return this.products.filter(product => {
	               return product.shopify_details.product_type.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1 || product.shopify_details.tags.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1
	            })
	          } else if (this.filter1 == 'none' && this.filter2 != 'none') {
	            return this.products.filter(product => {
	               return product.shopify_details.product_type.toLowerCase().indexOf(this.filter2.toLowerCase()) > -1 || product.shopify_details.tags.toLowerCase().indexOf(this.filter2.toLowerCase()) > -1
	            })
	          } else if (this.filter1 != 'none' && this.filter2 != 'none') {
	            return this.products.filter(product => {
	               return product.shopify_details.tags.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1 && product.shopify_details.product_type.toLowerCase().indexOf(this.filter2.toLowerCase()) > -1
	            })
	          }
	        } else {
	          if (this.filter1 == 'none') {
	            return this.products;
	          } else {
	            return this.products.filter(product => {
	               return product.shopify_details.product_type.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1 || product.shopify_details.tags.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1
	            })
	          }
	        }
	      }
	    },
	    props: ['data', 'config'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-modal__content-wrapper">
	      <h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
	      <p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
	      <p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
	      <div v-if="productSelected == null">
	        <div class="rc-order__filters mbs">
	          <template v-if="config.general_config.filters_products.doubleFilters == true">
	            <input type="radio" v-model="filter1" @click="filter1 = 'none'; filter2 = 'none';" value="none" id="none" class="rc-order__filter-input">
	            <label for="none" class="rc-order__filter" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == 'none' }">Tout</label>
	            <template v-if="config.general_config.filters_products.type == 'product_type'">
	              <template v-for="type in shopifyData.data.productTypes.edges" :key="type.key">
	                <template v-if="!config.general_config.filters_products.exclude_product_type.includes(type.node)">
	                  <input type="radio" v-model="filter1" class="rc-order__filter" :id="type.node" :value="type.node" class="rc-order__filter-input">
	                  <label :for="type.node" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == type.node }">((type.node))</label>
	                </template>
	              </template>
	            </template>
	            <template v-if="config.general_config.filters_products.type == 'manual'">
	              <template v-for="type in config.general_config.filters_products.list" :key="type.key">
	                <input type="radio" v-model="filter1" class="rc-order__filter" :id="type" :value="type" class="rc-order__filter-input">
	                <label :for="type" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == type }">((type))</label>
	              </template>
	              <template v-for="type in config.general_config.filters_products.list2" :key="type.key">
	                <input type="radio" v-model="filter2" class="rc-order__filter" :id="type" :value="type" class="rc-order__filter-input">
	                <label :for="type" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter2 == type }">((type))</label>
	              </template>
	            </template>
	          </template>
	          <template v-else>
	            <input type="radio" v-model="filter1" value="none" id="none" class="rc-order__filter-input">
	            <label for="none" class="rc-order__filter" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == 'none' }">Tout</label>
	            <template v-if="config.general_config.filters_products.type == 'product_type'">
	              <template v-for="type in shopifyData.data.productTypes.edges" :key="type.key">
	                <template v-if="!config.general_config.filters_products.exclude_product_type.includes(type.node)">
	                  <input type="radio" v-model="filter1" class="rc-order__filter" :id="type.node" :value="type.node" class="rc-order__filter-input">
	                  <label :for="type.node" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == type.node }">((type.node))</label>
	                </template>
	              </template>
	            </template>
	            <template v-if="config.general_config.filters_products.type == 'manual'">
	              <template v-for="type in config.general_config.filters_products.list" :key="type.key">
	                <input type="radio" v-model="filter1" class="rc-order__filter" :id="type" :value="type" class="rc-order__filter-input">
	                <label :for="type" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == type }">((type))</label>
	              </template>
	            </template>
	          </template>
	        </div>

	        <div class="grid mts">
	          <template v-for="product in filteredProducts" :key="product.key">
	            <div class="grid__cell 1/4--handheld-and-up 1/2 mbs">
	              <div class="rc-product_select">
	                <img class="rc-product_select-image" :src="product.images.medium">
	                <button type="button" name="button" class="button rc-product_select-button button--primary rc_button" @click="selectProduct(product)">((form_config.configurations.button_label))</button>
	              </div>
	              <p class="z-h10 heading text-left">((product.title))</p>
	              <p class="product-card__subtitle uppercase text t-7">((product.shopify_details.vendor))</p>
	            </div>
	          </template>
	        </div>
	      </div>
	      <div v-else class="mts">
	        <p class="rc-input__label" v-if="form_config.configurations.subtitle_3.show">((form_config.configurations.subtitle_3.label))</p>
	        <p class="mbs" v-if="form_config.configurations.description_3.show">((form_config.configurations.description_3.label))</p>
	        <div class="grid">
	          <div class="grid__cell 1/2--handheld-and-up">
	            <img class="" :src="productSelected.images.large">
	          </div>
	          <div class="grid__cell 1/2--handheld-and-up">
	            <p class="z-h10 heading text-left">((productSelected.title))</p>
	            <p class="product-card__subtitle uppercase text t-7">((productSelected.shopify_details.vendor))</p>
	            <p class="rc_link mbs rc_quickview" v-if="form_config.configurations.link_details.show" data-open-quickview :data-product-handle="productSelected.shopify_details.handle">((form_config.configurations.link_details.label))</p>

	            <p class="rc-order__product_title">((priceSelected | priceFormatterWithDiscount))</p>
	            <div class="mtm mbm rc-container-selects">
	              <template v-for="input in form_config.item_level_options[0].inputs" :key="input.key">
	                <div class="rc-container-select rc-input--double">
	                  <p class="rc-order__subtitle">((input.settings.label))</p>
	                  <rc-select-conditionnement-modal v-if="input.block_type == 'select-conditionnement-modal'" :optionSelected="variantSelected" :variants="productSelected.shopify_details.variants" v-on:selectVariant="changeVariant($event)"></rc-select-conditionnement-modal>
	                  <rc-quantity v-if="input.block_type == 'quantity'" :general_config="config.general_config" :quantity="quantitySelected" v-on:changeQuantity="changeQuantity($event)"></rc-quantity>
	                  <rc-datepicker v-if="input.block_type == 'datepicker'" :date="dateSelected" :block="input" v-on:selectDate="changeDate($event)"></rc-datepicker>
	                  <rc-select v-if="input.block_type == 'select' && input.settings.name == 'select_frequency'" :optionSelected="frequencySelected" :options="frequency" :block="input" v-on:changeFrequency="changeFrequency($event)"></rc-select>
	                </div>
	              </template>
	            </div>
	            <div class="text-right">
	              <template v-for="input in form_config.item_level_options[0].submit" :key="input.key">
	                <div class="grid__cell">
	                  <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :event="'select_product'" :options="input.settings" :key="input.block_type" @click.native="addSubscription()">((input.settings.label))</component>
	                </div>
	              </template>
	            </div>
	          </div>
	          <div class="grid__cell 1/1--handheld-and-up">
	            <p class="mbs rc-hover-pointer" @click="unselectProduct()" v-if="form_config.configurations.link_back.show">
	              <svg focusable="false" aria-hidden="true" class="icon-svg icon-svg--color-accent icon-svg--size-10 previous-link__icon" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10 10"><path d="M8 1L7 0 3 4 2 5l1 1 4 4 1-1-4-4"></path></svg>
	              <span class="rc-step__footer__previous-link-content">((form_config.configurations.link_back.label))</span>
	            </p>
	          </div>
	        </div>
	      </div>

	    </div>
	    `
	    })

	Vue.component('rc-all_subscriptions', {
	    data: function () {
	      return {

	      }
	    },
	    computed: {
	      subscriptions: function () {
	        var subscriptions = {};
	        var subscriptionsActive = {};
	        var subscriptionsCancelled = [];
	        var subscriptionsExpired = [];
	        var subscriptionsOnetime = [];
	        for (var i = 0; i < this.data.recharge_data.subscriptions.length; i++) {
	          if (this.data.recharge_data.subscriptions[i].status == 'ACTIVE') {
	            subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at] = subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at] || {};
	            subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at]['next_charge_scheduled_at'] = this.data.recharge_data.subscriptions[i].next_charge_scheduled_at;
	            subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at]['order_interval_frequency'] = this.data.recharge_data.subscriptions[i].order_interval_frequency;
	            subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at]['order_interval_frequency_array'] = this.data.recharge_data.subscriptions[i].product.subscription_defaults.order_interval_frequency_options;
	            subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at]['order_interval_unit'] = this.data.recharge_data.subscriptions[i].order_interval_unit;
	            subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at]['id'] = this.data.recharge_data.subscriptions[i].id;
	            subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at]['subs'] = subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at]['subs'] || [];
	            subscriptionsActive[this.data.recharge_data.subscriptions[i].next_charge_scheduled_at]['subs'].push({ 'subscription': this.data.recharge_data.subscriptions[i]});
	          } else if (this.data.recharge_data.subscriptions[i].status == 'CANCELLED') {
	            subscriptionsCancelled.push({'subscription': this.data.recharge_data.subscriptions[i]})
	          } else if (this.data.recharge_data.subscriptions[i].status == 'EXPIRED') {
	            subscriptionsExpired.push(this.data.recharge_data.subscriptions[i])
	          } else if (this.data.recharge_data.subscriptions[i].status == 'ONETIME') {
	            subscriptionsOnetime.push(this.data.recharge_data.subscriptions[i])
	          }
	        }
	        var subscriptionsActiveArray = Object.keys(subscriptionsActive).map((key) => subscriptionsActive[key]);

	        subscriptionsActiveArray.sort(function(a, b) {
	            var dateA = new Date(a.next_charge_scheduled_at), dateB = new Date(b.next_charge_scheduled_at);
	            return dateA - dateB;
	        });
	        subscriptions['active'] = subscriptionsActiveArray;
	        subscriptions['cancel'] = subscriptionsCancelled;
	        subscriptions['expired'] = subscriptionsExpired;
	        subscriptions['onetime'] = subscriptionsOnetime;
	        return subscriptions;
	      }
	    },
	    methods: {
	      actionModal(action, subscriptionsActive) {
	        if (action === "update_frequency") {
	          this.$eventHub.$emit('openModal', { component: action, data: {'subscriptionsActive': subscriptionsActive}});
	        }
	        if (action === "add_product_subscribe") {
	          this.$eventHub.$emit('openModal', { component: action, data: 'ok' });
	        }
	      }
	    },
	    props: ['data', 'component'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <li class="rc-order">
	      <div class="rc-input--double rc-other-products mbm">
	        <h3 class="rc-order__title z-h7">((component.title))</h3>
	        <template v-for="block in this.component.block_level_options" :key="block.key">
	          <rc-button class="button--secondary hide-mobile" :event="block.option" v-if="block.type == 'button' && block.option == 'add_product_subscribe'" @click.native="actionModal('add_product_subscribe')">((block.settings.label))</rc-button>
	        </template>
	      </div>
	      <div v-for="(subscriptionsActive, key) in subscriptions.active" :key="subscriptionsActive.key" class="mbs">
					<template v-if="data.recharge_data.schedule.length > 0">
		        <template v-if="subscriptionsActive.next_charge_scheduled_at != data.recharge_data.schedule[0].date">
		          <div class="rc-subscriptions_frequency">
		            <p class="rc-subscriptions_frequency-text">Prochaine expédition le ((subscriptionsActive.next_charge_scheduled_at | dateFormatter))</p>
		          </div>
		          <template v-for="subscriptionActive in subscriptionsActive.subs" :key="subscriptionActive.key">
		            <rc-product-item :general_config="data.general_config" :data="subscriptionActive" :dataRecharge="data.recharge_data" :component="component" :state="'active'"></rc-product-item>
		          </template>
		        </template>
	        </template>
	        <template v-else>
						<div class="rc-subscriptions_frequency">
							<p class="rc-subscriptions_frequency-text">Prochaine expédition le ((subscriptionsActive.next_charge_scheduled_at | dateFormatter))</p>
						</div>
						<template v-for="subscriptionActive in subscriptionsActive.subs" :key="subscriptionActive.key">
							<rc-product-item :general_config="data.general_config" :data="subscriptionActive" :dataRecharge="data.recharge_data" :component="component" :state="'active'"></rc-product-item>
						</template>
	        </template>
	      </div>
				<template v-for="block in this.component.block_level_options" :key="block.key">
					<rc-button class="button--secondary hide-desktop mtm" :event="block.option" v-if="block.type == 'button' && block.option == 'add_product_subscribe'" @click.native="actionModal('add_product_subscribe')">((block.settings.label))</rc-button>
				</template>
	    </li>
	    `
	    })

	Vue.component('rc-cancel_product', {
	    data: function () {
	      return {
	        rechargeData: this.config.recharge_data,
	        modals_config: this.config.pages_config.modals,
	        shopifyData: this.config.shopify_data,
	        value: "",
	        nextSlide: false,
	        formCancel: [
	          {
	            cancellation_reason: null,
	            cancellation_reason_comments: ""
	          }
	        ]
	      }
	    },
	    computed: {
	      form_config: function () {
	        var form_config;
	        for (var i = 0; i < this.modals_config.length; i++) {
	          if (this.modals_config[i].id == "cancel_product") {
	            form_config = this.modals_config[i].components[0];
	          }
	        }
	        return form_config;
	      }
	    },
	    methods: {
				displayNextSlide() {
					this.nextSlide = true;
					document.querySelector(".rc-modal__container").scrollTop = 0;
				},
	      input_callback($event, data) {
	        this.$set(this.formCancel[0], $event.inputName, $event.value);
					console.log(this.formCancel[0]);
	      },
	      submit(option) {
	        if (option == 'close_modal') {
	          this.$eventHub.$emit('closeModal');
	        }
	        if (option == "cancel_product_submit") {
	          if (this.formCancel[0].cancellation_reason == null) {
	            this.$toastr.Add({
	    				  title: '<svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>',
	    				  msg: this.config.general_config.alerts.cancelProductError.error,
	    					position: 'toast-top-right',
	    				  clickClose: true,
	    				  type: 'error',
	    					progressbar: false
	    				});
	          } if (this.formCancel[0].cancellation_reason == 'Autre raison' && this.formCancel[0].cancellation_reason_comments == '') {
	            this.$toastr.Add({
	    				  title: '<svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>',
	    				  msg: this.config.general_config.alerts.cancelProductEmpty.error,
	    					position: 'toast-top-right',
	    				  clickClose: true,
	    				  type: 'error',
	    					progressbar: false
	    				});
	          } else {
	            this.$eventHub.$emit('cancel_product', { cancellation_reason: this.formCancel[0].cancellation_reason, cancellation_reason_comments: this.formCancel[0].cancellation_reason_comments, subscriptionsIds: this.data.subscriptionsIds })
	          }
	        }
	      },
	      actionRetention(action) {
	        console.log(action);
	        console.log(this.data);
	        if (action.type == 0) {
	          if (action.action == 'discount_code') {
	            this.$eventHub.$emit('add_discount', { discountCode: action.value, nextDeliveryAdresse: this.data.product.address_id})
	          }
	        } else if (action.type == 1) {
	          var win = window.open(action.path, '_blank');
	          win.focus();
	        } else if (action.type == 2) {
	          if (action.action == 'change_product') {
	            this.$eventHub.$emit('openModal', { component: action.action, data: this.data.product})
	          }
	        }
	      }
	    },
	    props: ['data', 'config'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-modal__content-wrapper">
	      <div v-if="!nextSlide">
	        <h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
	        <p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
	        <p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
	        <div class="grid">
	          <template v-for="input in form_config.item_level_options[0].inputs" :key="input.key">
	            <div class="grid__cell contact__field" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :options="input.settings" :key="input.block_type"></component>
	            </div>
	          </template>
	          <template v-for="input in form_config.item_level_options[0].submit" :key="input.key">
	            <div class="grid__cell" v-bind:class="{ 'contact__field-left': input.position == 'left', 'contact__field-center': input.position == 'center', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :options="input.settings" :key="input.block_type" @click.native="displayNextSlide()">((input.settings.label))</component>
	            </div>
	          </template>
	        </div>
	      </div>
	      <div v-else>
	        <h3 class="rc-modal__title heading z-h6">((config.general_config.cancel_subscriptions.title))</h3>
	        <div class="grid">
	          <div class="grid__cell 1/1--handheld-and-up mbm">
							<div class="hide">((formCancel))</div>
	            <div class="grid container--small mauto">
	              <template v-for="input in config.general_config.cancel_subscriptions.reasons" :key="input.key">
	                <div class="grid__cell mts" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	                  <component v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :options="input.settings" :value="input.settings.value" v-on:input_callback="input_callback($event, data)" :key="input.block_type" v-bind:class="{ 'rc-input input--full pas': input.block_type == 'input' }"></component>
	                </div>
	              </template>
	              <div class="grid__cell mts 1/1--handheld-and-up">
	                <textarea name="cancellation_reason_comments" class="rc-input input--full pas" rows="3" placeholder="Précisez" v-model="formCancel[0].cancellation_reason_comments"></textarea>
	              </div>
	              <div class="grid__cell mts 1/1--handheld-and-up" v-if="config.general_config.cancel_subscriptions.showRetentions">
	                <template v-for="reason in config.general_config.cancel_subscriptions.reasons" :key="input.key">
	                  <div class="text-center mts" v-show="formCancel[0].cancellation_reason == reason.settings.label">
	                    <p class="text-center mbs">((reason.counter_actions[0].message))</p>
	                    <rc-button class="button--secondary" @click.native="actionRetention(reason.counter_actions[0])">((reason.counter_actions[0].cta_text))</rc-button>
	                  </div>
	                </template>
	              </div>
	            </div>
	          </div>
	          <div class="grid__cell 1/2--handheld-and-up mts contact__field-left">
	            <component v-bind:is="config.general_config.cancel_subscriptions.cancel_cta.block_type.replace(/^/,'rc-')" :options="config.general_config.cancel_subscriptions.cancel_cta.settings" :key="config.general_config.cancel_subscriptions.cancel_cta.block_type" @click.native="submit(config.general_config.cancel_subscriptions.cancel_cta.option)" class="button--invert">((config.general_config.cancel_subscriptions.cancel_cta.settings.label))</component>
	          </div>
	          <div class="grid__cell 1/2--handheld-and-up mts contact__field-right">
	            <component v-bind:is="config.general_config.cancel_subscriptions.confirme_cta.block_type.replace(/^/,'rc-')" :options="config.general_config.cancel_subscriptions.confirme_cta.settings" :key="config.general_config.cancel_subscriptions.confirme_cta.block_type" @click.native="submit(config.general_config.cancel_subscriptions.confirme_cta.option)" class="button--secondary">((config.general_config.cancel_subscriptions.confirme_cta.settings.label))</component>
	          </div>
	        </div>
	      </div>
	    </div>
	    `
	    })

	Vue.component('rc-cancel_subscriptions', {
	    data: function () {
	      return {

	      }
	    },
	    computed: {
	      subscriptions: function () {
	        var subscriptions = {};
	        var subscriptionsCancelled = [];
	        for (var i = 0; i < this.data.recharge_data.subscriptions.length; i++) {
	          if (this.data.recharge_data.subscriptions[i].status == 'CANCELLED') {
	            subscriptionsCancelled.push({'subscription': this.data.recharge_data.subscriptions[i]})
	          }
	        }

	        subscriptions['cancel'] = subscriptionsCancelled;
	        return subscriptions;
	      }
	    },
	    props: ['data', 'component'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <li class="rc-order rc-order-cancel" v-if="subscriptions.cancel.length > 0">
	      <div class="rc-input--double mbm">
	        <h3 class="rc-order__title z-h7">((component.title))</h3>
	      </div>

	      <template v-for="subscriptionCancel in subscriptions.cancel" :key="subscriptionCancel.key">
	        <rc-product-item :general_config="data.general_config" :data="subscriptionCancel" :component="component" :state="'cancel'"></rc-product-item>
	      </template>
	    </li>
	    `
		})

	Vue.component('rc-change_product', {
			data: function () {
				return {
					rechargeData: this.config.recharge_data,
					modals_config: this.config.pages_config.modals,
					shopifyData: this.config.shopify_data,
					filter1: 'none',
					filter2: 'none',
					products: this.config.recharge_data.products,
					productSelected: null,
					priceSelected: null,
					variantSelected: null,
					frequencySelected: null,
					frequencyUnitSelected: null
				}
			},
			methods: {
				selectProduct(_product) {
					console.log(_product);
					this.priceSelected = _product.shopify_details.variants[0].price;
					this.variantSelected = _product.shopify_details.variants[0].shopify_id;
					this.productSelected = _product;
					this.frequencyArray = _product.subscription_defaults.order_interval_frequency_options;
					this.frequencySelected = 30;
					this.frequencyUnitSelected = _product.subscription_defaults.order_interval_unit;
					var event = document.createEvent("Event");
					console.log('trigger me');
					event.initEvent("initQuickviewHandle", false, true);
					window.dispatchEvent(event);
				},
				unselectProduct() {
					this.priceSelected = null;
					this.productSelected = null;
					this.variantSelected = null;
					this.frequencySelected = null;
					this.frequencyUnitSelected = null;
				},
				changeVariant($event) {
					this.variantSelected = $event.variantId;
					this.priceSelected = $event.price;
				},
				changeFrequency($event) {
					this.frequencySelected = $event.frequency;
				},
				changeProduct() {
					this.$eventHub.$emit('changeProduct', { next_date_schedule: this.data.next_charge_scheduled_at, variantId: this.variantSelected, nextSubscriptionId: this.data.id, orderIntervalFrequency: this.frequencySelected, orderIntervalUnit: this.frequencyUnitSelected })
				}
			},
			computed: {
				frequency: function () {
					if (this.frequencyArray.length > 0) {
						var frequency = [];
						for (var i = 0; i < this.frequencyArray.length; i++) {
							frequency.push({
								value: this.frequencyArray[i],
								text: this.frequencyArray[i] + ' ' + commonsFilters.dateUnitFormatter(this.frequencyUnitSelected)
							})
						}
						return frequency;
					}
				},
				form_config: function () {
					var form_config;
					for (var i = 0; i < this.modals_config.length; i++) {
						if (this.modals_config[i].id == "change_product") {
							form_config = this.modals_config[i].components[0];
						}
					}
					return form_config;
				},
				filteredProducts: function () {
					if (this.config.general_config.filters_products.doubleFilters) {
						if (this.filter1 == 'none' && this.filter2 == 'none') {
							return this.products;
						} else if (this.filter1 != 'none' && this.filter2 == 'none') {
							return this.products.filter(product => {
								 return product.shopify_details.product_type.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1 || product.shopify_details.tags.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1
							})
						} else if (this.filter1 == 'none' && this.filter2 != 'none') {
							return this.products.filter(product => {
								 return product.shopify_details.product_type.toLowerCase().indexOf(this.filter2.toLowerCase()) > -1 || product.shopify_details.tags.toLowerCase().indexOf(this.filter2.toLowerCase()) > -1
							})
						} else if (this.filter1 != 'none' && this.filter2 != 'none') {
							return this.products.filter(product => {
								 return product.shopify_details.tags.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1 && product.shopify_details.product_type.toLowerCase().indexOf(this.filter2.toLowerCase()) > -1
							})
						}
					} else {
						if (this.filter1 == 'none') {
							return this.products;
						} else {
							return this.products.filter(product => {
								 return product.shopify_details.product_type.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1 || product.shopify_details.tags.toLowerCase().indexOf(this.filter1.toLowerCase()) > -1
							})
						}
					}
				}
			},
			props: ['data', 'config'],
			delimiters: ['((', '))'],
			filters: commonsFilters,
			template:  `
			<div class="rc-modal__content-wrapper">
				<h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
				<p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
				<p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
				<div class="grid mbs rc-product-container">
					<div class="rc-order__image grid__cell 1/3--handheld-and-up">
						<img :src="data.product.images.small">
					</div>
					<div class="grid__cell 2/3--handheld-and-up">
						<p class="z-h10 heading text-left">((data.product_title | cleanTitleSubscription))</p>
						<p class="product-card__subtitle uppercase text t-7">((data.product.shopify_details.vendor))</p>
						<p>((data.variant_title)) : ((data.price | priceFormatter))</p>
					</div>
				</div>
				<hr v-if="form_config.configurations.hr.show">
				<div v-if="productSelected == null">
					<p class="rc-input__label" v-if="form_config.configurations.subtitle_2.show">((form_config.configurations.subtitle_2.label))</p>
					<p v-if="form_config.configurations.description_2.show">((form_config.configurations.description_2.label))</p>
					<div class="rc-order__filters mbs">
						<template v-if="config.general_config.filters_products.doubleFilters == true">
							<input type="radio" v-model="filter1" @click="filter1 = 'none'; filter2 = 'none';" value="none" id="none" class="rc-order__filter-input">
							<label for="none" class="rc-order__filter" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == 'none' }">Tout</label>
							<template v-if="config.general_config.filters_products.type == 'product_type'">
								<template v-for="type in shopifyData.data.productTypes.edges" :key="type.key">
									<template v-if="!config.general_config.filters_products.exclude_product_type.includes(type.node)">
										<input type="radio" v-model="filter1" class="rc-order__filter" :id="type.node" :value="type.node" class="rc-order__filter-input">
										<label :for="type.node" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == type.node }">((type.node))</label>
									</template>
								</template>
							</template>
							<template v-if="config.general_config.filters_products.type == 'manual'">
								<template v-for="type in config.general_config.filters_products.list" :key="type.key">
									<input type="radio" v-model="filter1" class="rc-order__filter" :id="type" :value="type" class="rc-order__filter-input">
									<label :for="type" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == type }">((type))</label>
								</template>
								<template v-for="type in config.general_config.filters_products.list2" :key="type.key">
									<input type="radio" v-model="filter2" class="rc-order__filter" :id="type" :value="type" class="rc-order__filter-input">
									<label :for="type" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter2 == type }">((type))</label>
								</template>
							</template>
						</template>
						<template v-else>
							<input type="radio" v-model="filter1" value="none" id="none" class="rc-order__filter-input">
							<label for="none" class="rc-order__filter" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == 'none' }">Tout</label>
							<template v-if="config.general_config.filters_products.type == 'product_type'">
								<template v-for="type in shopifyData.data.productTypes.edges" :key="type.key">
									<template v-if="!config.general_config.filters_products.exclude_product_type.includes(type.node)">
										<input type="radio" v-model="filter1" class="rc-order__filter" :id="type.node" :value="type.node" class="rc-order__filter-input">
										<label :for="type.node" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == type.node }">((type.node))</label>
									</template>
								</template>
							</template>
							<template v-if="config.general_config.filters_products.type == 'manual'">
								<template v-for="type in config.general_config.filters_products.list" :key="type.key">
									<input type="radio" v-model="filter1" class="rc-order__filter" :id="type" :value="type" class="rc-order__filter-input">
									<label :for="type" class="rc-order__filter-label" v-bind:class="{ 'is-active': filter1 == type }">((type))</label>
								</template>
							</template>
						</template>
					</div>

					<div class="grid mts">
						<template v-for="product in filteredProducts" :key="product.key">
							<div class="grid__cell 1/4--handheld-and-up 1/2 mbs">
								<div class="rc-product_select">
									<img class="rc-product_select-image" :src="product.images.medium">
									<button type="button" name="button" class="button rc-product_select-button button--primary rc_button" @click="selectProduct(product)">((form_config.configurations.button_label))</button>
								</div>
								<p class="z-h10 heading text-left">((product.title))</p>
								<p class="product-card__subtitle uppercase text t-7">((product.shopify_details.vendor))</p>
							</div>
						</template>
					</div>
				</div>
				<div v-else class="mts">
					<p class="rc-input__label" v-if="form_config.configurations.subtitle_3.show">((form_config.configurations.subtitle_3.label))</p>
					<p class="mbs" v-if="form_config.configurations.description_3.show">((form_config.configurations.description_3.label))</p>
					<div class="grid">
						<div class="grid__cell 1/2--handheld-and-up">
							<img class="" :src="productSelected.images.large">
						</div>
						<div class="grid__cell 1/2--handheld-and-up rc-product-container">
							<p class="z-h10 heading text-left">((productSelected.title))</p>
							<p class="product-card__subtitle uppercase text t-7">((productSelected.shopify_details.vendor))</p>
							<p class="rc_link mbs rc_quickview" v-if="form_config.configurations.link_details.show" data-open-quickview :data-product-handle="productSelected.shopify_details.handle">((form_config.configurations.link_details.label))</p>

							<p class="rc-order__product_title">((priceSelected | priceFormatterWithDiscount))</p>
							<div class="mtm mbm rc-container-selects">
								<template v-for="input in form_config.item_level_options[0].inputs" :key="input.key">
									<div class="rc-container-select rc-input--double">
										<p class="rc-order__subtitle">((input.settings.label))</p>
										<rc-select-conditionnement-modal v-if="input.block_type == 'select-conditionnement-modal'" :optionSelected="variantSelected" :variants="productSelected.shopify_details.variants" v-on:selectVariant="changeVariant($event)"></rc-select-conditionnement-modal>
										<rc-select v-if="input.block_type == 'select'"  :optionSelected="frequencySelected" :options="frequency" :block="input" v-on:changeFrequency="changeFrequency($event)"></rc-select>
									</div>
								</template>
							</div>
							<div class="text-right">
								<template v-for="input in form_config.item_level_options[0].submit" :key="input.key">
									<div v-if="input.block_type == 'button'">
										<component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :event="'select_product'" :options="input.settings" :key="input.block_type" @click.native="changeProduct()">((input.settings.label))</component>
									</div>
								</template>
							</div>
						</div>
						<div class="grid__cell 1/1--handheld-and-up">
							<p class="mts rc-hover-pointer" @click="unselectProduct()" v-if="form_config.configurations.link_back.show">
								<svg focusable="false" aria-hidden="true" class="icon-svg icon-svg--color-accent icon-svg--size-10 previous-link__icon" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10 10"><path d="M8 1L7 0 3 4 2 5l1 1 4 4 1-1-4-4"></path></svg>
								<span class="rc-step__footer__previous-link-content">((form_config.configurations.link_back.label))</span>
							</p>
						</div>
					</div>
				</div>

			</div>
			`
			})

	Vue.component('rc-confirmation', {
	    data: function () {
	      return {
	        rechargeData: this.config.recharge_data,
	        modals_config: this.config.pages_config.modals,
	        shopifyData: this.config.shopify_data,
	      }
	    },
	    computed: {
	      form_config: function () {
	        console.log(this.data);
	        var form_config;
	        for (var i = 0; i < this.modals_config.length; i++) {
	          if (this.modals_config[i].id == "confirmation") {
	            form_config = this.modals_config[i].components[0];
	          }
	        }
	        return form_config;
	      }
	    },
	    methods: {
	      submit(option) {
	        if (option == 'confirmation_false') {
	          this.$eventHub.$emit('closeModal');
	        }
	        if (option == "confirmation_true") {
	          this.$eventHub.$emit(this.data.action, { subscriptionsIds: this.data.subscriptionsIds })
	        }
	      }
	    },
	    props: ['data', 'config'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-modal__content-wrapper">
	      <div>
	        <h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
	        <p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
	        <p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
	        <div class="grid">
	          <template v-for="input in form_config.item_level_options[0].inputs" :key="input.key">
	            <div class="grid__cell 1/2--handheld-and-up mtl" v-bind:class="{ 'contact__field-left': input.position == 'left', 'contact__field-center': input.position == 'center', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" :options="input.settings" :key="input.block_type" @click.native="submit(input.settings.name)" v-bind:class="{ 'button--invert': input.settings.name == 'confirmation_false', 'button--secondary': input.settings.name == 'confirmation_true' }">((input.settings.label))</component>
	            </div>
	          </template>
	        </div>
	      </div>
	    </div>
	    `
	    })

	Vue.component('rc-delete_subscriptions', {
	    data: function () {
	      return {

	      }
	    },
	    methods: {
	      deleteSubscriptions() {
					this.$eventHub.$emit('openModal', { component: 'cancel_product', data: { 'subscriptionsIds': this.subscriptionsIdsAll }});
	        //this.$eventHub.$emit('openModal', { component: 'confirmation', data: { action: 'deleteSubscriptions', subscriptionsIds: this.subscriptionsIdsAll}})
	      }
	    },
	    computed: {
	      subscriptionsIdsAll: function () {
	        var subscriptionsIds = {};
	        for (var i = 0; i < this.data.recharge_data.subscriptions.length; i++) {
	          if (this.data.recharge_data.subscriptions[i].status == 'ACTIVE') {
	            subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id] = subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id] || {};
	            subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['old_address_id'] = this.data.recharge_data.subscriptions[i].address_id;
	            subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['subscriptionIds'] = subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['subscriptionIds'] || [];
	            subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['subscriptionIds'].push(this.data.recharge_data.subscriptions[i].id);
	          }
	        }
	        var subscriptionsIdsArray = Object.keys(subscriptionsIds).map((key) => subscriptionsIds[key]);
					console.log(subscriptionsIdsArray);
	        return subscriptionsIdsArray;
	      },
				subscriptions: function () {
	        var subscriptions = {};
	        var subscriptionsCancelled = [];
            var subscriptionsActive = [];
	        for (var i = 0; i < this.data.recharge_data.subscriptions.length; i++) {
	          if (this.data.recharge_data.subscriptions[i].status == 'CANCELLED') {
	            subscriptionsCancelled.push({'subscription': this.data.recharge_data.subscriptions[i]})
	          }
	        }
            for (var i = 0; i < this.data.recharge_data.subscriptions.length; i++) {
	          if (this.data.recharge_data.subscriptions[i].status == 'ACTIVE') {
	            subscriptionsActive.push({'subscription': this.data.recharge_data.subscriptions[i]})
	          }
	        }

	        subscriptions['cancel'] = subscriptionsCancelled;
          subscriptions['active'] = subscriptionsActive;
	        return subscriptions;
	      }
	    },
	    props: ['data', 'component'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <li class="rc-order ptm">
	      <div v-if="subscriptions.active.length > 0">
	        <template v-for="input in component.block_level_options" :key="input.key">
	          <component v-bind:is="input.type.replace(/^/,'rc-')" class="button--secondary" :options="input.settings" :key="input.block_type" @click.native="deleteSubscriptions()">((input.settings.label))</component>
	        </template>
	      </div>
	    </li>
	    `
	    })

	Vue.component('rc-delivery-methods-list', {
	    data: function () {
	      return {
	        rechargeData: this.config.recharge_data,
	        modals_config: this.config.pages_config.modals,
	        shopifyData: this.config.shopify_data,
	      }
	    },
	    methods: {
	      selectDelivery(id) {
	        console.log(id);
	        this.$emit('selectDelivery', { id: id })
	      }
	    },
	    props: ['data', 'config'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <tbody class="rc-order-table-body">
	      <tr v-for="item in config.general_config.delivery_methods" :key="item.key" class="rc-order-contents">
	        <td class="rc-order-content">
	          <div class="rc-image_wrapper_border">
	            <img class="rc_nav_bar__logo" :src="((item.icon))" :alt="((item.type))">
	          </div>
	        </td>
	        <td class="rc-order-content hide-mobile">
	          <p>((item.type))</p>
	        </td>
	        <td class="rc-order-content rc-order-content-half">
						<p class="hide-desktop">((item.type))</p>
						<p>((item.price))</p>
	          <p>((item.price_description))</p>
	        </td>
	        <td class="rc-order-content-full">
	          <div class="rc-order-content rc-order-content-svg" v-if="item.delivery_free">
	            <svg width="26" height="20" viewBox="0 0 26 20" fill="none" xmlns="http://www.w3.org/2000/svg">
	              <path d="M2 9.05882L10.1699 17L24.0588 2" stroke="#DE7153" stroke-width="3"/>
	            </svg>
							<span class="rc_text-secondary z-h5 hide-desktop">Livraison offerte dès 45€ d’achat</span>
	          </div>
	          <div v-else class="hide-mobile rc-order-content rc-order-content-svg">
							<svg version="1.1" id="Calque_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="30" height="30"
								 viewBox="0 0 200 200" style="enable-background:new 0 0 200 200;" xml:space="preserve">
								 <polygon fill="#DE7153" points="180,35.63 165.87,21.5 100,87.37 34.13,21.5 20,35.63 85.87,101.5 20,167.37 34.13,181.5 100,115.63
								165.87,181.5 180,167.37 114.13,101.5 "/>
							</svg>
	          </div>
	        </td>
	        <td class="rc-order-content-full" v-if="data.block_type == 'update_delivery'">
	          <rc-button class="button--secondary w100" @click.native="selectDelivery(item.id)">Choisir</rc-button>
	        </td>
	      </tr>
	    </tbody>
	    `
	    })

	Vue.component('rc-delivery_methods_table', {
	    data: function () {
	      return {
	        rechargeData: this.data.recharge_data,
	        modals_config: this.data.pages_config.modals,
	        shopifyData: this.data.shopify_data,
	      }
	    },
	    methods: {
	      selectDelivery($event) {
	        this.$emit('selectDelivery', { id: $event.id })
	      }
	    },
	    props: ['data', 'component'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <li class="rc-order">
	      <h3 class="rc-order__title z-h7">((component.title))</h3>
	      <p class="rc-input__label" v-if="component.configurations.subtitle.show && component.block_type != 'update_delivery'">((component.configurations.subtitle.label))</p>
	      <p v-if="component.configurations.description_1.show">((component.configurations.description_1.label))</p>
	      <div class="mts">
	        <div class="rc-order-table">
	          <table class="rc-order-table-container">
	              <thead class="rc-order-table-header">
	                  <tr class="rc-order-headers">
	                      <th v-for="item in component.configurations.columns" :key="item.key" class="rc-order-header">((item.label))</th>
	                  </tr>
	              </thead>
	              <rc-delivery-methods-list :data="component" :config="data" v-on:selectDelivery="selectDelivery($event)"></rc-delivery-methods-list>
	          </table>
	        </div>
	      </div>
	    </li>
	    `
	    })

	Vue.component('rc-delivery_methods-item', {
	    data: function () {
	      return {
	          schedule: this.data.recharge_data.schedule
	      }
	    },
	    methods: {
	      actionModal(action) {
	        if (action === "update_delivery") {
	          this.$eventHub.$emit('openModal', { component: action, data: this.schedule[0].orders[0].charge.shipping_lines[0]});
	        }
	      }
	    },
	    props: ['data', 'component'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <li class="rc-order">
	      <h3 class="rc-order__title z-h7">((component.title))</h3>
	      <div class="grid grid--middle mtm mbm">
	        <div class="grid__cell 1/2--handheld-and-up">
	          <div class="grid grid--middle rc-method-item">
	            <div class="grid__cell 1/4--handheld-and-up">
	              <div class="rc-image_wrapper_border">
	                <template v-for="icon in component.item_level_options[0].icons" :key="input.key">
	                  <img v-if="icon.title.includes(schedule[0].orders[0].charge.shipping_lines[0].code.replace('BetterShipping-', '').replace('BetterShipping - ', '').substring(0,3).toLowerCase())" class="rc_nav_bar__logo" :src="((icon.link))" :alt="((icon.title))">
	                </template>
	              </div>
	            </div>
	            <div class="grid__cell 3/4--handheld-and-up">
	              <p class="rc-order__product_title">((schedule[0].orders[0].charge.shipping_lines[0].title))</p>
	            </div>
	          </div>
	        </div>
	        <div class="grid__cell 1/2--handheld-and-up">
	          <template v-for="input in component.item_level_options[0].inputs" :key="input.key">
	            <div v-bind:class="{'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :event="input.option" :options="input.settings" :key="component.block_type" @click.native="actionModal('update_delivery')">((input.settings.label))</component>
	            </div>
	          </template>
	        </div>
	      </div>
	    </li>
	    `
	    })

	Vue.component('rc-display_deliveries', {
	    data: function () {
	      return {
	        rechargeData: this.config.recharge_data,
	        modals_config: this.config.pages_config.modals,
	        shopifyData: this.config.shopify_data,
	      }
	    },
	    computed: {
	      form_config: function () {
	        var form_config;
	        for (var i = 0; i < this.modals_config.length; i++) {
	          if (this.modals_config[i].id == "display_deliveries") {
	            form_config = this.modals_config[i].components[0];
	          }
	        }
	        return form_config;
	      }
	    },
	    props: ['data', 'config'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-modal__content-wrapper">
	      <h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
	      <p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
	      <p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
	      <div class="rc-order">
	        <div class="rc-order-table">
	          <table class="rc-order-table-container">
	              <thead class="rc-order-table-header">
	                  <tr class="rc-order-headers">
	                      <th v-for="item in form_config.configurations.columns" :key="item.key" class="rc-order-header">((item.label))</th>
	                  </tr>
	              </thead>
	              <rc-delivery-methods-list :data="data" :config="config"></rc-delivery-methods-list>
	          </table>
	        </div>
	      </div>
	    </div>
	    `
	    })

	Vue.component('rc-edit_address', {
	    data: function () {
	      return {
	        rechargeData: this.config.recharge_data,
	        modals_config: this.config.pages_config.modals,
	        shopifyData: this.config.shopify_data,
	        value: "",
	        formAdressRecharge: [
	          {
	            firstname: this.data.address.first_name,
	            lastname: this.data.address.last_name,
	            address: this.data.address.address1,
	            address_2: this.data.address.address2,
	            phone: this.data.address.phone,
	            zip: this.data.address.zip,
	            city: this.data.address.city,
	            country: this.data.address.country
	          }
	        ],
	        formAdressShopify: [
	          {
	            firstname: this.data.address.firstName,
	            lastname: this.data.address.lastName,
	            address: this.data.address.address1,
	            address_2: this.data.address.address2,
	            phone: this.data.address.phone,
	            zip: this.data.address.zip,
	            city: this.data.address.city,
	            country: this.data.address.country
	          }
	        ]
	      }
	    },
	    computed: {
	      form_config: function () {
	        var form_config;
	        for (var i = 0; i < this.modals_config.length; i++) {
	          if (this.modals_config[i].id == "edit_address") {
	            form_config = this.modals_config[i].components[0];
	          }
	        }
	        return form_config;
	      }
	    },
	    methods: {
	      input_callback_recharge($event, data) {
	        this.$set(this.formAdressRecharge[0], $event.inputName, $event.value);
	      },
	      submit_recharge() {
					if (this.formAdressRecharge[0].firstname == null ||
							this.formAdressRecharge[0].lastname == null ||
							this.formAdressRecharge[0].address == null ||
							this.formAdressRecharge[0].phone == null ||
							this.formAdressRecharge[0].zip == null ||
							this.formAdressRecharge[0].city == null ||
							this.formAdressRecharge[0].country == null) {
								this.$toastr.Add({
									title: '<svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>',
									msg: this.config.general_config.alerts.formFieldRequired.error,
									position: 'toast-top-right',
									clickClose: true,
									type: 'error',
									progressbar: false
								});
					} else {
						this.$eventHub.$emit('edit_address', { data: this.formAdressRecharge, addressId: this.data.address.id })
					}
	      },
	      input_callback_shopify($event, data) {
	        this.$set(this.formAdressShopify[0], $event.inputName, $event.value);
	      },
	      submit_shopify() {
					if (this.formAdressShopify[0].firstname == null ||
							this.formAdressShopify[0].lastname == null ||
							this.formAdressShopify[0].address == null ||
							this.formAdressShopify[0].phone == null ||
							this.formAdressShopify[0].zip == null ||
							this.formAdressShopify[0].city == null ||
							this.formAdressShopify[0].country == null) {
								this.$toastr.Add({
									title: '<svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>',
									msg: this.config.general_config.alerts.formFieldRequired.error,
									position: 'toast-top-right',
									clickClose: true,
									type: 'error',
									progressbar: false
								});
					} else {
						this.$eventHub.$emit('edit_address_shopify', { data: this.formAdressShopify, addressId: this.data.address.id })
					}
	      },
	    },
	    props: ['data', 'config'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-modal__content-wrapper">
	      <h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
	      <p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
	      <p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
	      <hr v-if="form_config.configurations.hr.show">
	      <p class="rc-input__label" v-if="form_config.configurations.subtitle_2.show">((form_config.configurations.subtitle_2.label))</p>
	      <p v-if="form_config.configurations.description_2.show">((form_config.configurations.description_2.label))</p>
				<template v-if="this.data.source == 'recharge'">
	        <div class="grid">
	          <template v-for="input in form_config.item_level_options[0].inputs" :key="input.key">
	            <div class="grid__cell contact__field" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
								<rc-select v-if="input.block_type == 'select'" :optionSelected="formAdressRecharge[0][input.settings.name]" :options="input.settings.options" :block="input" v-on:input_callback="input_callback_recharge($event, data)" class="mtm10"></rc-select>
								<component v-else v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :value="formAdressRecharge[0][input.settings.name]" v-on:input_callback="input_callback_recharge($event, data)"  :options="input.settings" :key="input.block_type"></component>
	            </div>
	          </template>
	          <template v-for="input in form_config.item_level_options[0].submit" :key="input.key">
	            <div class="grid__cell" v-bind:class="{ 'contact__field-left': input.position == 'left', 'contact__field-center': input.position == 'center', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :options="input.settings" :key="input.block_type" @click.native="submit_recharge()">((input.settings.label))</component>
	            </div>
	          </template>
	        </div>
	      </template>
	      <template v-if="this.data.source == 'shopify'">
	        <div class="grid">
	          <template v-for="input in form_config.item_level_options[0].inputs" :key="input.key">
	            <div class="grid__cell contact__field" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
								<rc-select v-if="input.block_type == 'select'" :optionSelected="formAdressShopify[0][input.settings.name]" :options="input.settings.options" :block="input" v-on:input_callback="input_callback_recharge($event, data)" class="mtm10"></rc-select>
								<component v-else v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :value="formAdressShopify[0][input.settings.name]" v-on:input_callback="input_callback_shopify($event, data)"  :options="input.settings" :key="input.block_type"></component>
	            </div>
	          </template>
	          <template v-for="input in form_config.item_level_options[0].submit" :key="input.key">
	            <div class="grid__cell" v-bind:class="{ 'contact__field-left': input.position == 'left', 'contact__field-center': input.position == 'center', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :options="input.settings" :key="input.block_type" @click.native="submit_shopify()">((input.settings.label))</component>
	            </div>
	          </template>
	        </div>
	      </template>
	    </div>
	    `
	    })

	Vue.component('rc-edit_addresses', {
	    data: function () {
	      return {
					addresses: this.data.recharge_data.addresses,
	      }
	    },
	    methods: {
	      actionModal(action, address) {
	        if (action === "add_address") {
	          this.$eventHub.$emit('openModal', { component: action, data: { showCheckbox: true, subscriptionsIds: this.subscriptionsIdsAll }});
	        }
	        if (action === "edit_address") {
	          this.$eventHub.$emit('openModal', { component: action, data: { address, source: this.source }});
	        }
	      },
				setAddresseDefault(addressId) {
					this.$eventHub.$emit('change_adresse', { address_id: addressId, subscriptionsIds: this.subscriptionsIdsAll})
				}
	    },
			computed: {
				subscriptionsIdsAll: function () {
		      var subscriptionsIds = {};
		      for (var i = 0; i < this.data.recharge_data.subscriptions.length; i++) {
		        if (this.data.recharge_data.subscriptions[i].status == 'ACTIVE') {
		          subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id] = subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id] || {};
		          subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['old_address_id'] = this.data.recharge_data.subscriptions[i].address_id;
		          subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['subscriptionIds'] = subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['subscriptionIds'] || [];
		          subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['subscriptionIds'].push(this.data.recharge_data.subscriptions[i].id);
		        }
		      }
		      var subscriptionsIdsArray = Object.keys(subscriptionsIds).map((key) => subscriptionsIds[key]);
		      return subscriptionsIdsArray;
		    },
			},
			watch: {
				'data.recharge_data': {
		      handler(newVal, oldVal) {
		        this.addresses = this.data.recharge_data.addresses
		      },
		      deep: true
		    }
      },
	    props: ['data', 'component', 'source'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-order">
	      <template v-if="source == 'recharge'">
	        <h3 class="rc-order__title z-h7">((component.title)) ( ((addresses.length)) )</h3>
	        <div class="grid">
	          <div v-for="(address, index) in addresses" :key="address.key" class="1/2--handheld-and-up grid__cell">
	            <div class="rc-address_container" v-bind:class="{ 'rc-address_container-selected': data.recharge_data.schedule[0].orders[0].charge.address_id === address.id }">
								<div class="rc-hover-pointer" @click="setAddresseDefault(address.id)">
									<p>((address.first_name)) ((address.last_name))</p>
									<p>((address.address1))</p>
									<p v-if="address.address2">((address.address2))</p>
									<p>((address.zip)) ((address.city)) ((address.country))</p>
								</div>
	              <template v-for="input in component.item_level_options[0].inputs" :key="input.key">
	                <div class="mts" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	                  <component v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" @click.native="actionModal('edit_address', address)" :options="input.settings" :key="component.block_type">((input.settings.label))</component>
	                </div>
	              </template>
	            </div>
	          </div>
	        </div>
	        <template v-for="input in component.block_level_options" :key="input.key">
	          <div class="grid__cell" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	            <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :event="input.option" :options="input.settings" :key="component.block_type" @click.native="actionModal('add_address')">((input.settings.label))</component>
	          </div>
	        </template>
	      </template>
	    </div>
	    `
	    })

	Vue.component('rc-edit_addresses_shopify', {
	    data: function () {
	      return {

	      }
	    },
	    methods: {
	      actionModal(action, address) {
	        if (action === "add_address") {
	          this.$eventHub.$emit('openModal', { component: action, data: { showCheckbox: true, subscriptionsIds: this.subscriptionsIdsAll }});
	        }
	        if (action === "edit_address") {
	          this.$eventHub.$emit('openModal', { component: action, data: { address, source: this.source }});
	        }
	      },
				setAddresseDefault(addressId) {
					this.$eventHub.$emit('change_adresse', { address_id: addressId, subscriptionsIds: this.subscriptionsIdsAll})
				}
	    },
	    props: ['data', 'component', 'source'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-order">
	      <template v-if="source == 'shopify'">
	        <h3 class="rc-order__title z-h7">((component.title)) ( ((data.shopify_data.data.customer.addresses.edges.length)) )</h3>
	        <div class="grid">
	          <div v-for="(address, index) in data.shopify_data.data.customer.addresses.edges" :key="address.key" class="1/2--handheld-and-up grid__cell">
	            <div class="rc-address_container">
	              <p>((address.node.firstName)) ((address.node.lastName))</p>
	              <p>((address.node.address1))</p>
	              <p v-if="address.node.address2">((address.node.address2))</p>
	              <p>((address.node.zip)) ((address.node.city)) ((address.node.country))</p>
	              <template v-for="input in component.item_level_options[0].inputs" :key="input.key">
	                <div class="mts" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	                  <component v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" @click.native="actionModal('edit_address', address.node)" :options="input.settings" :key="component.block_type">((input.settings.label))</component>
	                </div>
	              </template>
	            </div>
	          </div>
	        </div>
	        <template v-for="input in component.block_level_options" :key="input.key">
	          <div class="grid__cell" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	            <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :event="input.option" :options="input.settings" :key="component.block_type" @click.native="actionModal('add_address')">((input.settings.label))</component>
	          </div>
	        </template>
	      </template>
	    </div>
	    `
	    })

	Vue.component('rc-edit_password', {
	    data: function () {
	      return {

	      }
	    },
	    props: ['data', 'component', 'source'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-order">
	      <h3 class="rc-order__title z-h7">((component.title))</h3>
	      <form action="#" method="post">
	        <div class="grid">
	          <div class="1/2--handheld-and-up grid__cell">
	            <div class="grid">
	              <template v-for="input in component.item_level_options[0].inputs" :key="input.key">
	                <div class="grid__cell contact__field" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	                  <component v-bind:is="input.block_type.replace(/^/,'rc-')" :options="input.settings" :key="component.block_type"></component>
	                </div>
	              </template>
	            </div>
	          </div>
	          <div class="1/2--handheld-and-up grid__cell">

	          </div>
	          <template v-for="input in component.block_level_options" :key="input.key">
	            <div class="grid__cell" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :options="input.settings" :key="component.block_type">((input.settings.label))</component>
	            </div>
	          </template>
	        </div>
	      </form>
	    </div>
	    `
	    })

	Vue.component('rc-edit_payment_method', {
	    data: function () {
	      return {
	        rechargeData: this.config.recharge_data,
	        modals_config: this.config.pages_config.modals,
	        shopifyData: this.config.shopify_data,
	        iframe: {
	          loaded: false,
	          src: 'https://shopifysubscriptions.com/customer_portal_payment_source_form/' + '{{ customer.metafields.subscriptions.customer_string }}' + '/payment_source',
	          style: null,
	          wrapperStyle: null,
	        }
	      }
	    },
	    computed: {
	      form_config: function () {
	        var form_config;
	        for (var i = 0; i < this.modals_config.length; i++) {
	          if (this.modals_config[i].id == "edit_payment_method") {
	            form_config = this.modals_config[i].components[0];
	          }
	        }
	        return form_config;
	      }
	    },
	    mounted() {
	      this.iframe.style = {
	        position: 'absolute',
	        width: window.innerWidth,
	        height: window.innerHeight,
	      }
	      this.iframe.wrapperStyle = {
	        overflow: 'hidden',
	        height: '550px',
	        position: 'relative',
	      }
	    },
	    methods: {
	      load: function(){
	      	this.iframe.loaded = true;
	      }
	    },
	    props: ['data', 'config'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-modal__content-wrapper">
	      <h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
	      <p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
	      <p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
	      <hr v-if="form_config.configurations.hr.show">
	      <p class="rc-input__label" v-if="form_config.configurations.subtitle_2.show">((form_config.configurations.subtitle_2.label))</p>
	      <p v-if="form_config.configurations.description_2.show">((form_config.configurations.description_2.label))</p>
	      <div class="grid">
	        <div class="grid__cell 1/2--handheld-and-up">
	          <div id="iframe-wrapper" :style="iframe.wrapperStyle" >
	            <iframe
	              @load="load"
	              v-show="iframe.loaded"
	              :src="iframe.src"
	              :style="iframe.style"
	              :height="500"
	              :width="380"
	              type="application/pdf"
	              frameborder="0"
	            ></iframe>
	            <div v-show="!iframe.loaded">
	              <div class="cart__loader-container is-active">
	                <div class="lds-dual-ring"></div>
	              </div>
	            </div>
	          </div>
	        </div>
	        <div class="grid__cell 1/2--handheld-and-up hide-mobile">
	          <img class="rc-edit_payment_image" v-if="form_config.configurations.image.show" :src="((form_config.configurations.image.link))">
	        </div>
	      </div>
	    </div>
	    `
	    })

	Vue.component('rc-edit_personals_informations', {
	    data: function () {
	      return {

	      }
	    },
	    computed: {
	      formInformationsRecharge() {
	        var formInformationsRecharge = [];
	        formInformationsRecharge.push({
	          firstname: this.data.recharge_data.customer.first_name,
	          lastname: this.data.recharge_data.customer.last_name,
	          email: this.data.recharge_data.customer.email,
	        });
	        return formInformationsRecharge;
	      },
	      formInformationsShopify() {
	        var formInformationsShopify = [];
	        formInformationsShopify.push({
	          firstname: this.data.shopify_data.data.customer.firstName,
	          lastname: this.data.shopify_data.data.customer.lastName,
	          email: this.data.shopify_data.data.customer.email,
	          acceptsMarketing: this.data.shopify_data.data.customer.acceptsMarketing,
	        });
	        return formInformationsShopify;
	      }
	    },
	    methods: {
	      input_callback_recharge($event, data) {
	        this.$set(this.formInformationsRecharge[0], $event.inputName, $event.value);
	      },
	      input_callback_shopify($event, data) {
	        this.$set(this.formInformationsShopify[0], $event.inputName, $event.value);
	      },
	      submit_recharge() {
	        this.$eventHub.$emit('edit_personals_informations', { data: this.formInformationsRecharge })
	      },
	      submit_shopify() {
	        this.$eventHub.$emit('edit_personals_informations_shopify', { data: this.formInformationsShopify })
	      }
	    },
	    props: ['data', 'component', 'source'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-order">
	      <template v-if="source == 'recharge'">
	        <h3 class="rc-order__title z-h7">
					<span class="rc-input--double">
					<span>((component.title))</span>
					<span>((formInformationsRecharge[0].email))</span>
					</span>
					</h3>
	        <div class="grid">
	          <template v-for="input in component.item_level_options[0].inputs" :key="input.key">
	            <div class="grid__cell contact__field" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :value="formInformationsRecharge[0][input.settings.name]" v-on:input_callback="input_callback_recharge($event, data)" :options="input.settings" :key="component.block_type"></component>
	            </div>
	          </template>
	          <template v-for="input in component.block_level_options" :key="input.key">
	            <div class="grid__cell" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :options="input.settings" :key="component.block_type" @click.native="submit_recharge()">((input.settings.label))</component>
	            </div>
	          </template>
	        </div>
	      </template>
	      <template v-if="source == 'shopify'">
	        <h3 class="rc-order__title z-h7">
					<span class="rc-input--double">
						<span>((component.title))</span>
						<span>((formInformationsShopify[0].email))</span>
					</span>
	        </h3>
	        <div class="grid">
	          <template v-for="input in component.item_level_options[0].inputs" :key="input.key">
	            <div class="grid__cell contact__field" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :value="formInformationsShopify[0][input.settings.name]" v-on:input_callback="input_callback_shopify($event, data)" :options="input.settings" :key="component.block_type"></component>
	            </div>
	          </template>
	          <template v-for="input in component.block_level_options" :key="input.key">
	            <div class="grid__cell" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
	              <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :options="input.settings" :key="component.block_type" @click.native="submit_shopify()">((input.settings.label))</component>
	            </div>
	          </template>
	        </div>
	      </template>
	    </div>
	    `
	    })

	Vue.component('rc-error_payement', {
	    data: function () {
	      return {

	      }
	    },
	    methods: {
	      setPayement() {
	        this.$eventHub.$emit('displayPayement');
	      }
	    },
	    props: ['data', 'component'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <li class="rc-order rc-order_error" v-if="data.recharge_data.payment_sources[0].has_card_error_in_dunning">
	      <div class="grid grid--middle">
	        <div class="grid__cell 3/4--handheld-and-up">
	          <h3 class="rc-order__title z-h7">((component.title))</h3>
	          <p>((component.subtitle))</p>
	        </div>
	        <div class="grid__cell 1/4--handheld-and-up">
	          <template v-for="input in component.block_level_options" :key="input.key">
	            <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :options="input.settings" :key="input.block_type" @click.native="setPayement()">((input.settings.label))</component>
	          </template>
	        </div>
	      </div>
	    </li>
	    `
	    })

	Vue.component('rc-last_order_details', {
	    data: function () {
	      return {
	        last_order: this.data.shopify_data.data.customer.orders.edges[0].node
	      }
	    },
	    computed: {
	      Price: function () {
	        var PriceArray = [];
	        var subtotal = 0;
	        var shipping = 0;
	        var refunded = 0;
	        var total = 0;
	        var discount = 0;
	        subtotal = (this.last_order.subtotalPrice == 0.00) ? this.last_order.subtotalPrice : Number(this.last_order.subtotalPrice);
	        if (this.last_order.discountApplications.edges.length > 0) {
	          discount = Number(this.last_order.discountApplications.edges[0].node.value.amount);
	        }
	        shipping = (this.last_order.totalShippingPrice == 0.00) ? this.last_order.totalShippingPrice : Number(this.last_order.totalShippingPrice);
	        refunded = (this.last_order.totalRefunded == 0.00) ? this.last_order.totalRefunded : Number(this.last_order.totalRefunded);
	        total = (this.last_order.totalPrice == 0.00) ? this.last_order.totalPrice : Number(this.last_order.totalPrice);
	        PriceArray.push({
	          subtotal: subtotal,
	          discount: discount,
	          refunded: refunded,
	          shipping: shipping,
	          total: total
	        })
	        return PriceArray;
	      },
	    },
	    props: ['data', 'component'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <template>
	      <li class="rc-order">
	        <h3 class="rc-order__title z-h7 mbm">((component.title)) ((last_order.name)) passée le ((last_order.processedAt | dateFormatterLong))</h3>

	        <template v-for="line_item in last_order.lineItems.edges" :key="line_item.key">
	          <div class="rc-order__product-schedule-shopify mts">
	            <div class="rc-order__product-schedule-image-title">
	              <div class="rc-order__image-wrapper">
	                <img class="" :src="line_item.node.variant.image.src">
	              </div>
	              <div class="rc-order__info-wrapper">
	                <p class="rc-order__product_title">((line_item.node.title))</p>
	                <p class="" v-if="line_item.node.variant.title != 'Default Title'">((line_item.node.variant.title))</p>
	              </div>
	            </div>
	            <div>
	              <p class="rc-order__text rc_text rc-strong text-right" v-if="line_item.node.title.includes('Expédié') || line_item.node.title.includes('Abonnement')">(((line_item.node.variant.price * 0.85) | priceFormatter))</p>
	              <p class="rc-order__text rc_text rc-strong text-right" v-else>((line_item.node.variant.price | priceFormatter))</p>
	            </div>
	            <div>
	              <p class="rc-order__text rc_text text-right rc-strong">x((line_item.node.quantity))</p>
	            </div>
	            <div>
	              <p class="rc-order__text rc_text rc-strong text-right" v-if="line_item.node.title.includes('Expédié') || line_item.node.title.includes('Abonnement')">(( (line_item.node.quantity * (line_item.node.variant.price * 0.85) ) | priceFormatter))</p>
	              <p class="rc-order__text rc_text rc-strong text-right" v-else>(((line_item.node.quantity * line_item.node.variant.price) | priceFormatter))</p>
	            </div>
	          </div>
	        </template>

	        <div class="rc-schedule_footer rc-schedule_footer-right">
	          <div class="rc-order__price-info">
	            <div v-if="this.component.configurations.subtotal.show" class="rc-schedule_footer-flex mbs">
	              <p class="rc-order__product_title">((this.component.configurations.subtotal.label))</p>
	              <p class="rc-order__product_title">((Price[0].subtotal | priceFormatter))</p>
	            </div>
	            <div v-if="Price[0].discount != 0 && this.component.configurations.discount.show" class="rc-schedule_footer-flex mbs">
	              <p class="rc-order__product_title">((this.component.configurations.discount.label))</p>
	              <p class="rc-order__product_title">- ((Price[0].discount | priceFormatter))</p>
	            </div>
	            <div v-if="Price[0].shipping != 0 && this.component.configurations.shipping.show" class="rc-schedule_footer-flex mbs">
	              <p class="rc-order__product_title">((this.component.configurations.shipping.label))</p>
	              <p class="rc-order__product_title">((Price[0].shipping | priceFormatter))</p>
	            </div>
	            <div v-if="this.component.configurations.total.show" class="rc-schedule_footer-flex rc-order__price-total pbs mbs">
	              <p class="rc-order__product_title">((this.component.configurations.total.label))</p>
	              <p class="rc-order__product_title">((Price[0].total | priceFormatter))</p>
	            </div>
	            <div v-if="Price[0].refunded != 0 && this.component.configurations.refunded.show" class="rc-schedule_footer-flex mbs">
	              <p class="rc-order__product_title">((this.component.configurations.refunded.label))</p>
	              <p class="rc-order__product_title">- ((Price[0].refunded | priceFormatter))</p>
	            </div>
	          </div>
	        </div>
	      </li>
	    </template>
	    `
	    })

	Vue.component('rc-last_order', {
	    data: function () {
	      return {
	        viewOrderDetails: false,
	        orderDetails: null,
	        isMoreTwoWeek: null,
	        linkTracking: 'https://franklinpetfood.com/pages/tracking?orderNumber='
	      }
	    },
	    methods: {
	      orderViewDetails($event) {
	        this.viewOrderDetails = true;
	        this.orderDetails = $event.data;

	        var fortnightAway = new Date(+new Date - 12096e5);
	        if (new Date($event.data.processedAt) < fortnightAway) {
	          this.isMoreTwoWeek = true;
	        }
	      },
	    },
	    props: ['data', 'component', 'source'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <template v-if="!viewOrderDetails">
	      <li class="rc-order">
	        <h3 class="rc-order__title z-h7">((component.title))</h3>
	        <template v-if="source == 'shopify'">
	          <rc-line-item v-if="component.view == 'inline'" v-for="order in data.shopify_data.data.customer.orders.edges.slice(0, component.query.first)" :key="order.key" :view="component.view" :data="order" :source="source"></rc-line-item>
	          <div class="rc-order-table" v-if="component.view == 'table'">
	            <table class="rc-order-table-container">
	                <thead class="rc-order-table-header">
	                    <tr class="rc-order-headers">
	                        <th v-for="item in this.component.configurations.columns" :key="item.key" class="rc-order-header">((item.label))</th>
	                    </tr>
	                </thead>
	                <tbody class="rc-order-table-body">
										<rc-line-item v-on:orderViewDetails="orderViewDetails($event)" v-for="order in data.shopify_data.data.customer.orders.edges.slice(0, component.query.first)" :key="order.key" :view="component.view" :data="order" :source="source"></rc-line-item>
	                </tbody>
	            </table>
	          </div>
	        </template>
	        <template v-if="source == 'recharge'">
	          <rc-line-item v-if="component.view == 'inline'" v-for="order in data.shopify_data.data.customer.orders.edges.slice(0, component.query.first)" :key="order.key" :view="component.view" :data="order" :source="source"></rc-line-item>
	          <div class="rc-order-table" v-if="component.view == 'table'">
	            <table class="rc-order-table-container">
	                <thead class="rc-order-table-header">
	                    <tr class="rc-order-headers">
	                      <th v-for="item in this.component.configurations.columns" :key="item.key" class="rc-order-header">((item.label))</th>
	                    </tr>
	                </thead>
	                <tbody class="rc-order-table-body">
	                  <rc-line-item v-for="order in data.shopify_data.data.customer.orders.edges.slice(0, component.query.first)" :key="order.key" :view="component.view" :data="order" :source="source"></rc-line-item>
	                </tbody>
	            </table>
	          </div>
	        </template>
	      </li>
	    </template>
	    <template v-else>
	      <div>
	      <p class="mbs rc-hover-pointer" @click="viewOrderDetails = !viewOrderDetails" v-if="component.configurations.link_back.show">
	        <svg focusable="false" aria-hidden="true" class="icon-svg icon-svg--color-accent icon-svg--size-10 previous-link__icon" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10 10"><path d="M8 1L7 0 3 4 2 5l1 1 4 4 1-1-4-4"></path></svg>
	        <span class="rc-step__footer__previous-link-content">((component.configurations.link_back.label))</span>
	      </p>
	      <li class="rc-order">
	        <h3 class="rc-order__title z-h7">Commande ((orderDetails.name))</h3>
	        <p class="rc-order__product_text mbs">Du ((orderDetails.processedAt | dateFormatter))</p>

	        <div class="rc-input--triple mbm mtm">
	          <div>
	            <p class="rc-order__subtitle mbs">Adresse de livraison</p>
	            <p class="rc-order__product_text">((orderDetails.shippingAddress.firstName | capitalize)) ((orderDetails.shippingAddress.lastName | capitalize))</p>
	            <p class="rc-order__product_text">((orderDetails.shippingAddress.address1))</p>
	            <p class="rc-order__product_text" v-if="orderDetails.shippingAddress.address2 != ''">((orderDetails.shippingAddress.address2))</p>
	            <p class="rc-order__product_text">((orderDetails.shippingAddress.zip)) ((orderDetails.shippingAddress.city))</p>
	          </div>
	        </div>

	        <template v-for="line_item in orderDetails.lineItems.edges" :key="line_item.key">
	          <div class="rc-order__product-schedule-shopify mts" v-if="line_item.node.variant">
	            <div class="rc-order__product-schedule-image-title">
	              <div class="rc-order__image-wrapper">
	                <img class="" :src="line_item.node.variant.image.src">
	              </div>
	              <div class="rc-order__info-wrapper">
	                <p class="rc-order__product_title">((line_item.node.title))</p>
	                <p class="rc-order__product_title" v-if="line_item.node.variant.title != 'Default Title'">((line_item.node.variant.title))</p>
	              </div>
	            </div>
	            <div>
	            <p class="rc-order__text rc_text rc-strong text-right" v-if="line_item.node.title.includes('Expédié') || line_item.node.title.includes('Abonnement')">(((line_item.node.variant.price * 0.85) | priceFormatter))</p>
	            <p class="rc-order__text rc_text rc-strong text-right" v-else>((line_item.node.variant.price | priceFormatter))</p>
	            </div>
	            <div>
	              <p class="rc-order__text rc_text text-right rc-strong">x((line_item.node.quantity))</p>
	            </div>
	            <div>
	              <p class="rc-order__text rc_text rc-strong text-right" v-if="line_item.node.title.includes('Expédié') || line_item.node.title.includes('Abonnement')">(( (line_item.node.quantity * (line_item.node.variant.price * 0.85) ) | priceFormatter))</p>
	              <p class="rc-order__text rc_text rc-strong text-right" v-else>(((line_item.node.quantity * line_item.node.variant.price) | priceFormatter))</p>
	            </div>
	          </div>
	        </template>

	          <div class="rc-schedule_footer rc-schedule_footer-right">
	            <div class="rc-order__price-info">
	              <div v-if="this.component.configurations.subtotal.show" class="rc-schedule_footer-flex mbs">
	                <p class="rc-order__product_title">((this.component.configurations.subtotal.label))</p>
	                <p class="rc-order__product_title">((orderDetails.subtotalPrice | priceFormatter))</p>
	              </div>
	              <div v-if="orderDetails.discountApplications.edges.length != 0 && this.component.configurations.discount.show" class="rc-schedule_footer-flex mbs">
	                <p class="rc-order__product_title">((this.component.configurations.discount.label))</p>
	                <p class="rc-order__product_title">- ((orderDetails.discountApplications.edges[0].node.value.amount | priceFormatter))</p>
	              </div>
	              <div v-if="orderDetails.totalShippingPrice != 0 && this.component.configurations.shipping.show" class="rc-schedule_footer-flex mbs">
	                <p class="rc-order__product_title">((this.component.configurations.shipping.label))</p>
	                <p class="rc-order__product_title">((orderDetails.totalShippingPrice | priceFormatter))</p>
	              </div>
	              <div v-if="this.component.configurations.total.show" class="rc-schedule_footer-flex rc-order__price-total mbs">
	                <p class="rc-order__product_title">((this.component.configurations.total.label))</p>
	                <p class="rc-order__product_title">((orderDetails.totalPrice | priceFormatter))</p>
	              </div>
	              <div v-if="orderDetails.totalRefunded != 0 && this.component.configurations.refunded.show" class="rc-schedule_footer-flex mbs">
	                <p class="rc-order__product_title">((this.component.configurations.refunded.label))</p>
	                <p class="rc-order__product_title">- ((orderDetails.totalRefunded | priceFormatter))</p>
	              </div>
	            </div>
	          </div>
	        </li>
	      </div>
	    </template>
	    `
	    })

	Vue.component('rc-loader', {
			data: function () {
				return {
				}
			},
			delimiters: ['((', '))'],
			filters: commonsFilters,
			template:  `
			<div class="rc-modal__content-wrapper">
				<div class="rc-modal_loader">
					<div class="rc-modal_loader-image">
						<img src="https://cdn.shopify.com/s/files/1/2598/9270/files/Chat-1_1.png?v=1599562281">
					</div>
					<div class="dot-flashing mts mbm"></div>
					<p class="rc-modal_loader-text">Votre demande est en cours de traitement.</p>
				</div>
			</div>
			`
			})

	Vue.component('rc-payment_methods-item', {
	    data: function () {
	      return {
	          payment_sources: this.data.recharge_data.payment_sources
	      }
	    },
	    methods: {
	      actionModal(action, payment_source) {
	        if (action === "edit_payment_method") {
	          this.$eventHub.$emit('openModal', { component: action, data: { payment_source }});
	        }
	      }
	    },
	    props: ['data', 'component'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <li class="rc-order">
	      <h3 class="rc-order__title z-h7">((component.title))</h3>
	      <template v-for="payment_source in payment_sources" :key="payment_source.key" v-if="payment_source.payment_type != 'paypal'">
	        <div class="grid grid--middle mtm mbm">
	          <div class="grid__cell 1/2--handheld-and-up">
	            <div class="grid grid--middle rc-method-item">
	              <div class="grid__cell 1/4--handheld-and-up">
	                <template v-for="icon in component.item_level_options[0].icons" :key="input.key">
	                  <img v-if="icon.title == payment_source.card_brand" class="rc_nav_bar__logo" :src="((icon.link))" :alt="((icon.title))">
	                </template>
	              </div>
	              <div class="grid__cell 3/4--handheld-and-up">
	                <p>((payment_source.card_brand)) se terminant par : ((payment_source.card_last4))</p>
	                <p>Expire le ((payment_source.card_exp_month))/((payment_source.card_exp_year))</p>
	              </div>
	            </div>
	          </div>
	          <div class="grid__cell 1/2--handheld-and-up">
	            <template v-for="input in component.item_level_options[0].inputs" :key="input.key">
	              <div v-bind:class="{'contact__field-right': input.position == 'right' }">
	                <component v-bind:is="input.block_type.replace(/^/,'rc-')" class="button--secondary" :event="input.option" :options="input.settings" :key="component.block_type" @click.native="actionModal('edit_payment_method', payment_source)">((input.settings.label))</component>
	              </div>
	            </template>
	          </div>
	        </div>
	      </template>
	      <template v-for="payment_source in payment_sources" :key="payment_source.key" v-if="payment_source.payment_type == 'paypal'">
	        <div class="grid grid--middle">
	          <div class="grid__cell 1/2--handheld-and-up">
	            <div class="grid grid--middle">
	              <div class="grid__cell 1/4--handheld-and-up">
	                <template v-for="icon in component.item_level_options[0].icons" :key="input.key">
	                  <img v-if="icon.title == payment_source.card_brand" class="rc_nav_bar__logo" :src="((icon.link))" :alt="((icon.title))">
	                </template>
	              </div>
	              <div class="grid__cell 3/4--handheld-and-up">
	                <p>((payment_source.payment_type))</p>
	                <p>Compte ((payment_source.email))</p>
	              </div>
	            </div>
	          </div>
	        </div>
	        <hr>
	        <p v-if="component.configurations.description_1.show">((component.configurations.description_1.label)) <a class="rc_link" href="https://www.paypal.com">www.paypal.com</a></p>
	        <p v-if="component.configurations.description_2.show">((component.configurations.description_2.label)) <a class="rc_link" href="https://franklinpetfood.com/pages/contactez-nous">contactez-nous</a></p>
	      </template>
	    </li>
	    `
	    })

	Vue.component('rc-quickview_product', {
		  data: function () {
		    return {
		      rechargeData: this.config.recharge_data,
		      modals_config: this.config.pages_config.modals,
		      shopifyData: this.config.shopify_data,
		    }
		  },
		  computed: {
		    form_config: function () {
		      var form_config;
		      for (var i = 0; i < this.modals_config.length; i++) {
		        if (this.modals_config[i].id == "quickview_product") {
		          form_config = this.modals_config[i].components[0];
		        }
		      }
		      return form_config;
		    },
		  },
		  props: ['data', 'config'],
		  delimiters: ['((', '))'],
		  filters: commonsFilters,
		  template:  `
		  <div class="rc-modal__content-wrapper">
		    <h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
		    <p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
		    <p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
		    <hr v-if="form_config.configurations.hr.show">
		    <div class="mts">
		      <p class="rc-input__label" v-if="form_config.configurations.subtitle_2.show">((form_config.configurations.subtitle_2.label))</p>
		      <p class="mbs" v-if="form_config.configurations.description_2.show">((form_config.configurations.description_2.label))</p>
		      <div class="grid">
		        <div class="grid__cell 1/2--handheld-and-up">
		          <img class="" :src="data.product.images.large">
		        </div>
		        <div class="grid__cell 1/2--handheld-and-up">
		          <p class="product-card__title z-h10 heading text-left">((data.product_title | cleanTitleSubscription))</p>
		          <p class="product-card__subtitle uppercase text t-7">((data.product.shopify_details.vendor))</p>
		          <p>((data.variant_title)) : ((data.price | priceFormatter))</p>
		          <div v-html="data.product.shopify_details.body_html" class="rc-quickview-description"></div>
		        </div>
		      </div>
		    </div>

		  </div>
		  `
		  })

	Vue.component('rc-schedule', {
		  data: function () {
		    return {
		      discountCode: '',
		      displayDiscountInput: false,
		      isMondialRelay: false
		    }
		  },
		  computed: {
		    schedule: function () {
		      var nextSchedules = [];
		      for (var i = 0; i < this.data.recharge_data.schedule.length; i++) {
		        var schedule = this.data.recharge_data.schedule[i].orders;
		        var nextSchedule = {};
		        for (var k = 0; k < schedule.length; k++) {
		          if (!schedule[k].is_skipped) {
		            nextSchedule[this.data.recharge_data.schedule[i].date] = nextSchedule[this.data.recharge_data.schedule[i].date] || [];
		            nextSchedule[this.data.recharge_data.schedule[i].date].push(schedule[k]);
		          }
		        }
		        if (Object.keys(nextSchedule).length > 0) {
		          nextSchedules.push({
		            date: this.data.recharge_data.schedule[i].date,
		            orders: nextSchedule[this.data.recharge_data.schedule[i].date]
		          })
		        }
		      }
		      return nextSchedules;
		    },
		    AddressArray: function () {
		      var AddressArray = [];
		      for (var i = 0; i < this.data.recharge_data.addresses.length; i++) {
		        AddressArray.push({
		          value: this.data.recharge_data.addresses[i].id,
		          text: this.data.recharge_data.addresses[i].first_name+' '+this.data.recharge_data.addresses[i].last_name+', '+this.data.recharge_data.addresses[i].address1+', '+this.data.recharge_data.addresses[i].zip+' '+this.data.recharge_data.addresses[i].city
		        })
		      }
		      return AddressArray;
		    },
		    item_level_options: function () {
		      var item_level_options = [];
		      for (var i = 0; i < this.component.item_level_options.length; i++) {
		        item_level_options.push({
		          value: this.component.item_level_options[i].option,
		          text: this.component.item_level_options[i].settings.label
		        })
		      }
		      return item_level_options;
		    },
		    subscriptionsIds: function () {
		      var subscriptionsIds = {};
		      for (var i = 0; i < this.schedule[0].orders.length; i++) {
		        subscriptionsIds[this.schedule[0].orders[i].subscription.address_id] = subscriptionsIds[this.schedule[0].orders[i].subscription.address_id] || {};
		        subscriptionsIds[this.schedule[0].orders[i].subscription.address_id]['old_address_id'] = this.schedule[0].orders[i].subscription.address_id;
		        subscriptionsIds[this.schedule[0].orders[i].subscription.address_id]['subscriptionIds'] = subscriptionsIds[this.schedule[0].orders[i].subscription.address_id]['subscriptionIds'] || [];
		        subscriptionsIds[this.schedule[0].orders[i].subscription.address_id]['subscriptionIds'].push(this.schedule[0].orders[i].subscription.id);
		      }
		      var subscriptionsIdsArray = Object.keys(subscriptionsIds).map((key) => subscriptionsIds[key]);
		      return subscriptionsIdsArray;
		    },
		    subscriptionsIdsAll: function () {
		      var subscriptionsIds = {};
		      for (var i = 0; i < this.data.recharge_data.subscriptions.length; i++) {
		        if (this.data.recharge_data.subscriptions[i].status == 'ACTIVE') {
		          subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id] = subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id] || {};
		          subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['old_address_id'] = this.data.recharge_data.subscriptions[i].address_id;
		          subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['subscriptionIds'] = subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['subscriptionIds'] || [];
		          subscriptionsIds[this.data.recharge_data.subscriptions[i].address_id]['subscriptionIds'].push(this.data.recharge_data.subscriptions[i].id);
		        }
		      }
		      var subscriptionsIdsArray = Object.keys(subscriptionsIds).map((key) => subscriptionsIds[key]);
		      return subscriptionsIdsArray;
		    },
		    DeliveryArray: function () {
		      var DeliveryArray = [];
		      for (var i = 0; i < this.schedule[0].orders[0].charge.shipping_lines.length; i++) {
		        if (this.schedule[0].orders[0].charge.shipping_lines[i].code.includes("Mondial") && this.schedule[0].orders[0].charge.shipping_lines[i].code.includes("Relay")) {
		          this.isMondialRelay = true
		        }
		        DeliveryArray.push({
		          value: this.schedule[0].orders[0].charge.shipping_lines[i].code,
		          text: this.schedule[0].orders[0].charge.shipping_lines[i].title
		        })
		      }
		      return DeliveryArray;
		    },
		    Price: function () {
		      var PriceArray = [];
		      var subtotal = 0;
		      var shipping = 0;
		      var total = 0;
		      var discount = 0;
					subtotal = (this.schedule[0].orders[0].charge.total_line_items_price == 0.00) ? this.schedule[0].orders[0].charge.total_line_items_price : Number(this.schedule[0].orders[0].charge.total_line_items_price);
					discount = (this.schedule[0].orders[0].charge.total_discounts == 0.00) ? this.schedule[0].orders[0].charge.total_discounts : Number(this.schedule[0].orders[0].charge.total_discounts);
					shipping = (this.schedule[0].orders[0].charge.shipping_lines[0].price == 0.00) ? this.schedule[0].orders[0].charge.shipping_lines[0].price : Number(this.schedule[0].orders[0].charge.shipping_lines[0].price);
					refunded = (this.schedule[0].orders[0].charge.total_refunds == 0.00) ? this.schedule[0].orders[0].charge.total_refunds : Number(this.schedule[0].orders[0].charge.total_refunds);
					total = (this.schedule[0].orders[0].charge.total_price == 0.00) ? this.schedule[0].orders[0].charge.total_price : Number(this.schedule[0].orders[0].charge.total_price);
		      PriceArray.push({
		        subtotal: subtotal,
		        discount: discount,
		        shipping: shipping,
		        total: total
		      })
		      return PriceArray;

		    }
		  },
		  methods: {
		    addDiscount() {
		      this.$eventHub.$emit('add_discount', { discountCode: this.discountCode, nextDeliveryAdresse: this.schedule[0].orders[0].subscription.address_id})
		    },
		    changeDate($event) {
		      this.$eventHub.$emit('set_next_charge_date', { date: commonsFilters.dateFormatterRecharge($event.date), subscriptionsIds: this.subscriptionsIds})
		    },
		    actionModal(action, subscriptionsIds) {
		      if (action === "cancel_product") {
		        this.$eventHub.$emit('openModal', { component: action, data: { 'subscriptionsIds': this.subscriptionsIds }});
		      }
		      if (action === "display_deliveries") {
		        this.$eventHub.$emit('openModal', { component: action, data: { }});
		      }
		    }
		  },
			watch: {
				'data.recharge_data': {
					handler(newVal, oldVal) {
						this.data.recharge_data = this.data.recharge_data
					},
					deep: true
				}
			},
		  props: ['data', 'component'],
		  delimiters: ['((', '))'],
		  filters: commonsFilters,
		  template:  `
		  <template v-if="schedule.length > 0">
				<li class="rc-order" v-if="this.component.view === 'featured'">
					<h3 class="rc-order__title z-h7">((component.title)) ((schedule[0].date | dateFormatterLong))</h3>
					<p class="rc-order__product_text mbs">((component.subtitle))</p>
					<p class="rc-order__product_text" v-if="this.component.configurations.text_address.show">((this.component.configurations.text_address.label)) ((this.data.recharge_data.schedule[0].orders[0].charge.shipping_address.first_name | capitalize)) ((this.data.recharge_data.schedule[0].orders[0].charge.shipping_address.last_name | capitalize)) ((this.data.recharge_data.schedule[0].orders[0].charge.shipping_address.address1)) (( this.data.recharge_data.schedule[0].orders[0].charge.shipping_address.zip)) ((this.data.recharge_data.schedule[0].orders[0].charge.shipping_address.city))</p>
					<p class="rc-order__product_text mbs" v-if="this.component.configurations.text_delivery.show">((this.component.configurations.text_delivery.label)) ((this.data.recharge_data.schedule[0].orders[0].charge.shipping_lines[0].title))</p>
					<div class="rc-input--triple mbm">
						<template v-for="block in this.component.block_level_options" :key="block.key">
							<rc-datepicker :subscriptionsIds="subscriptionsIds" :date="schedule[0].date" :block="block" v-if="block.block_type == 'datepicker' && block.option == 'edit_scheduled_date'" v-on:selectDate="changeDate($event)"></rc-datepicker>
							<rc-select :nextSubscriptionId="schedule[0].orders[0].subscription.id" :subscriptionsIds="subscriptionsIdsAll" :optionSelected="schedule[0].orders[0].subscription.address_id" :options="AddressArray" :block="block" :optionsAction="block.actions" v-else-if="block.block_type == 'select' && block.option == 'edit_address'"></rc-select>
							<rc-select :nextSubscriptionId="schedule[0].orders[0].subscription.id" :subscriptionsIds="subscriptionsIdsAll" :optionSelected="schedule[0].orders[0].charge.shipping_lines[0].code" :options="DeliveryArray" :isMondialRelay="isMondialRelay" :block="block" :optionsAction="block.actions" v-else-if="block.block_type == 'select' && block.option == 'edit_delivery'"></rc-select>
						</template>
					</div>

					<p class="rc-order__subtitle" v-if="this.component.configurations.subtitle_2.show">((component.subtitle_2))</p>
					<template v-for="schedule in schedule[0].orders" :key="schedule.key">
						<rc-product-item :general_config="data.general_config" :data="schedule" :dataRecharge="data.recharge_data" :component="component" :state="'active'"></rc-product-item>
					</template>

					<div class="rc-schedule_footer">
						<div>
							<p v-if="this.component.configurations.credit_card.show">((this.component.configurations.credit_card.label)) ((Price[0].total | priceFormatter)) le (( schedule[0].orders[0].subscription.next_charge_scheduled_at | dateFormatter ))</p>
							<p>via votre (( data.recharge_data.payment_sources[0].card_brand )) **** **** **** (( data.recharge_data.payment_sources[0].card_last4 )).</p>
						</div>
						<div class="rc-order__price-info">
							<div v-if="this.component.configurations.subtotal.show" class="rc-schedule_footer-flex mbs">
								<p class="rc-order__product_title">((this.component.configurations.subtotal.label))</p>
								<p class="rc-order__product_title">((Price[0].subtotal | priceFormatter))</p>
							</div>
							<div v-if="Price[0].discount != 0 && this.component.configurations.discount.show" class="rc-schedule_footer-flex mbs">
								<p class="rc-order__product_title">((this.component.configurations.discount.label))</p>
								<p class="rc-order__product_title">- ((Price[0].discount | priceFormatter))</p>
							</div>
							<div v-if="Price[0].shipping != 0 && this.component.configurations.shipping.show" class="mbs">
								<div class="rc-schedule_footer-flex">
									<p class="rc-order__product_title">((this.component.configurations.shipping.label))</p>
									<p class="rc-order__product_title">((Price[0].shipping | priceFormatter))</p>
								</div>
								<template v-for="block in this.component.block_level_options" :key="block.key">
									<p class="rc_link" v-if="block.block_type == 'link' && block.option == 'display_deliveries'" @click="actionModal('display_deliveries')">((block.settings.label))</p>
								</template>
							</div>
							<div v-if="this.component.configurations.total.show" class="rc-schedule_footer-flex rc-order__price-total mbs">
								<p class="rc-order__product_title">((this.component.configurations.total.label))</p>
								<p class="rc-order__product_title">((Price[0].total | priceFormatter))</p>
							</div>
							<template v-for="block in this.component.block_level_options" :key="block.key">
								<div v-if="block.block_type == 'link' && block.option == 'edit_discount_code'">
									<p class="rc_link rc-order__add-discount rc-strong" @click="displayDiscountInput = !displayDiscountInput">((block.settings.label))</p>
								</div>
							</template>
						</div>
					</div>
					<div v-if="displayDiscountInput" class="grid mts">
						<div class="grid__cell 1/2--handheld-and-up">
						</div>
						<div class="grid__cell 1/2--handheld-and-up">
							<div class="rc-schedule_footer-flex">
								<div class="contact__field 4/5--handheld-and-up pbn mrs"">
									<input type="text" id="discount" name="discount" v-model="discountCode" placeholder="Votre code promo" class="input text t-8 input--full">
								</div>
								<div>
									<rc-button class="button--secondary grid__cell 1/2--handheld-and-up" :event="'edit_discount_code'" @click.native="addDiscount()">Valider</rc-button>
								</div>
							</div>
						</div>
					</div>
				</li>
				<li class="rc-order rc-order-table" v-else>
					<h3 class="rc-order__title z-h7">((component.title))</h3>
					<table class="rc-order-table-container only-desktop">
							<thead class="rc-order-table-header">
									<tr class="rc-order-headers">
											<th v-for="item in this.component.configurations.columns" :key="item.key" class="rc-order-header">((item.label))</th>
									</tr>
							</thead>
							<tbody class="rc-order-table-body">
									<tr v-for="order in this.recharge_data.charges.slice(0, this.component.query.first).reverse()" :key="order.key"class="rc-order-contents">
											<td class="rc-order-content"><a class="rc-order-content-link" href="#">#((order.id))</a></td>
											<td class="rc-order-content">((order.created_at | dateFormatter))</td>
											<td class="rc-order-content">((order.subtotal_price | priceFormatter))</td>
											<td class="rc-order-content">((order.status))</td>
											<td class="rc-order-content">></td>
									</tr>
							</tbody>
					</table>
					<div class="only-mobile">
					<div class="rc-order-table-body">
							<tr v-for="order in this.recharge_data.charges.slice(0, this.component.query.first).reverse()" :key="order.key"class="rc-order-contents">
									<td class="rc-order-content"><a class="rc-order-content-link" href="#">#((order.id))</a></td>
									<td class="rc-order-content">((order.created_at | dateFormatter))</td>
									<td class="rc-order-content">((order.subtotal_price | priceFormatter))</td>
									<td class="rc-order-content">((order.status))</td>
									<td class="rc-order-content">></td>
							</tr>
					</div>
					</div>
				</li>
		  </template>
		  `
		  })

	Vue.component('rc-update_delivery', {
	    data: function () {
	      return {
	        rechargeData: this.config.recharge_data,
	        modals_config: this.config.pages_config.modals,
	        shopifyData: this.config.shopify_data,
	        nextDeliveryMethods: this.config.recharge_data.schedule[0].orders[0].charge.shipping_lines[0],
	        selectMondialRelay: false
	      }
	    },
	    computed: {
	      form_config: function () {
	        var form_config;
	        for (var i = 0; i < this.modals_config.length; i++) {
	          if (this.modals_config[i].id == "update_delivery") {
	            form_config = this.modals_config[i].components[0];
	          }
	        }
	        return form_config;
	      }
	    },
	    methods: {
	      selectDelivery($event) {
	        console.log($event);
	        if ($event.id != 'mondial_relay') {
	          var contact_body = 'Customer id : ' + this.config.recharge_data.customer.hash + '\n' + "Nom : " + this.config.recharge_data.customer.last_name + ' ' + this.config.recharge_data.customer.first_name + '\n' + "Email : " + this.config.recharge_data.customer.email + '\n' + "Number_active_subscriptions : " + this.config.recharge_data.customer.number_active_subscriptions + '\n' + "Nouveau mode de livraison : " +  $event.id;
	          console.log(contact_body);
	          var url  = '/contact?';
	              url += encodeURIComponent('form_type') +'='+ encodeURIComponent('contact');
	              url += '&'+ encodeURIComponent('utf8') +'='+ encodeURIComponent('✓');
	              url += '&'+ encodeURIComponent('contact[email]') +'='+ encodeURIComponent(this.config.recharge_data.customer.email);
	              url += '&'+ encodeURIComponent('contact[body]') +'='+ encodeURIComponent(contact_body);
						this.$eventHub.$emit('showLoader');
	          axios.post(url).then(response => {
	            console.log(response);
	            this.$eventHub.$emit('closeModal');
	            this.$toastr.Add({
	    				  title: '<svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>',
	    				  msg: this.config.general_config.alerts.selectDelivery.success,
	    					position: 'toast-top-right',
	    				  clickClose: true,
	    				  type: 'success',
	    					progressbar: false
	    				});
	          }).catch(function (error) {
	            console.log(error);
	            this.$eventHub.$emit('closeModal');
	            this.$toastr.Add({
	              title: '<svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>',
	              msg: this.config.general_config.alerts.selectDelivery.error,
	              position: 'toast-top-right',
	              clickClose: true,
	              type: 'error',
	              progressbar: false
	            });
	          })
	        } else {
	          this.selectMondialRelay = true
	        }
	      }
	    },
			watch: {
				'data.recharge_data': {
					handler(newVal, oldVal) {
						this.data.recharge_data = this.data.recharge_data
					},
					deep: true
				}
			},
	    props: ['data', 'config'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-modal__content-wrapper">
	      <h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
	      <p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
	      <p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
	      <p>((nextDeliveryMethods.title))</p>
	      <hr v-if="form_config.configurations.hr.show">
	      <template v-if="selectMondialRelay">
	        <p class="rc-input__label" v-if="form_config.configurations.subtitle_3.show">((form_config.configurations.subtitle_3.label))</p>
	        <p v-if="form_config.configurations.description_3.show">((form_config.configurations.description_3.label))</p>
	        <h2 class="text-center mal">Pour les modifications de mode de livraison via Mondial Relay, merci de contacter notre équipe support à l'adresse : <a href="mailto:bienvenue@franklinpetfood.com" style="background-color: transparent;">bienvenue@franklinpetfood.com</a></h2>
	      </template>
	      <template v-else>
	        <p class="rc-input__label" v-if="form_config.configurations.subtitle_2.show">((form_config.configurations.subtitle_2.label))</p>
	        <p v-if="form_config.configurations.description_2.show">((form_config.configurations.description_2.label))</p>
	        <div class="grid">
	          <div class="">
	            <rc-delivery_methods_table :data="config" :component="form_config" v-on:selectDelivery="selectDelivery($event)"></rc-delivery_methods_table>
	          </div>
	        </div>
	      </template>
	    </div>
	    `
	    })

	Vue.component('rc-update_frequency', {
			data: function () {
				return {
					rechargeData: this.config.recharge_data,
					modals_config: this.config.pages_config.modals,
					shopifyData: this.config.shopify_data,
					subscription: this.data.subscription,
					frequencySelected: this.data.subscription.order_interval_frequency,
					frequencyUnit: 'day',
					dateSelected: this.data.subscription.next_charge_scheduled_at,
					dateNextSchedule: this.config.recharge_data.schedule[0].date
				}
			},
			created() {
			  //do something after creating vue instance
				this.$eventHub.$on('getRechargeData', data => {
					this.$eventHub.$emit('closeModal');
					this.rechargeData = data;
					this.dateNextSchedule = data.schedule[0].date;
				})
			},
			computed: {
				isDateNextSchedule: function () {
					console.log(this.subscription.next_charge_scheduled_at);
					console.log(this.dateNextSchedule);
					var isDateNextSchedule = false;
					if (this.rechargeData.schedule.length > 0) {
						if (this.subscription.next_charge_scheduled_at == this.dateNextSchedule) {
							isDateNextSchedule = true;
						}
					}
					console.log('isDateNextSchedule');
					console.log(isDateNextSchedule);
					return isDateNextSchedule;
				},
				form_config: function () {
					var form_config;
					for (var i = 0; i < this.modals_config.length; i++) {
						if (this.modals_config[i].id == "update_frequency") {
							form_config = this.modals_config[i].components[0];
						}
					}
					return form_config;
				},
				subscriptionsIds: function () {
					var subscriptionsIds = {};
					subscriptionsIds[this.data.subscription.address_id] = subscriptionsIds[this.data.subscription.address_id] || {};
					subscriptionsIds[this.data.subscription.address_id]['old_address_id'] = this.data.subscription.address_id;
					subscriptionsIds[this.data.subscription.address_id]['subscriptionIds'] = subscriptionsIds[this.data.subscription.address_id]['subscriptionIds'] || [];
					subscriptionsIds[this.data.subscription.address_id]['subscriptionIds'].push(this.data.subscription.id);
					var subscriptionsIdsArray = Object.keys(subscriptionsIds).map((key) => subscriptionsIds[key]);
					return subscriptionsIdsArray;
				},
				FrequencyArray: function () {
					var FrequencyArray = [];
					for (var i = 0; i < this.data.subscription.product.subscription_defaults.order_interval_frequency_options.length; i++) {
						FrequencyArray.push({
							value: this.data.subscription.product.subscription_defaults.order_interval_frequency_options[i],
							text: 'Tous les ' + this.data.subscription.product.subscription_defaults.order_interval_frequency_options[i] +' '+ commonsFilters.dateUnitFormatter('day')
						})
					}
					return FrequencyArray;
				},
			},
			methods: {
				changeFrequency($event) {
					this.frequencySelected = $event.frequency;
				},
				changeDate($event) {
					this.dateSelected = $event.date;
				},
				changeDateAndFrequency() {
					this.$eventHub.$emit('changeDateAndFrequency', { subscriptionsIds: this.subscriptionsIds, charge_interval_frequency: this.frequencySelected, next_charge_scheduled_at: commonsFilters.dateFormatterRecharge(this.dateSelected), interval_unit_type: this.frequencyUnit })
				},
				addToNextDelivery() {
					this.$eventHub.$emit('changeDateAndFrequency', { subscriptionsIds: this.subscriptionsIds, charge_interval_frequency: this.rechargeData.schedule[0].orders[0].subscription.order_interval_frequency, next_charge_scheduled_at: commonsFilters.dateFormatterRecharge(this.rechargeData.schedule[0].orders[0].subscription.next_charge_scheduled_at), interval_unit_type: this.rechargeData.schedule[0].orders[0].subscription.order_interval_unit })
				}
			},
			props: ['data', 'config'],
			delimiters: ['((', '))'],
			filters: commonsFilters,
			template:  `
			<div class="rc-modal__content-wrapper">
				<h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
				<p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
				<p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
				<div class="grid grid--middle mts">
					<div class="rc-product-card__border mbm">
						<div class="grid">
							<div class="rc-order__image grid__cell 1/3--handheld-and-up">
								<img :src="subscription.product.images.small">
							</div>
							<div class="grid__cell 2/3--handheld-and-up">
								<p class="z-h10 heading text-left">((subscription.product.title | cleanTitleSubscription))</p>
								<p class="product-card__subtitle uppercase text t-7">((subscription.product.shopify_details.vendor))</p>
								<p>((subscription.variant_title)) : ((subscription.price | priceFormatter))</p>
							</div>
						</div>
					</div>
					<div class="1/1--handheld-and-up">
						<div class="grid">
							<template v-for="input in form_config.item_level_options[0].inputs" :key="input.key">
								<div class="grid__cell" v-bind:class="{ '1/1--handheld-and-up': input.size == '1/1', '1/2--handheld-and-up': input.size == '1/2', '1/3--handheld-and-up': input.size == '1/3', 'contact__field-right': input.position == 'right' }">
									<template v-if="rechargeData.schedule.length > 0">
										<template v-if="input.block_type === 'select'">
											<component class="rc-input_wrapper" v-bind:is="input.block_type.replace(/^/,'rc-')" :optionSelected="frequencySelected" v-on:changeFrequency="changeFrequency($event)" :options="FrequencyArray" :block="input" :key="input.block_type"></component>
										</template>
										<template v-else-if="input.block_type === 'link' && !isDateNextSchedule">
											<component class="rc_link rc_link-secondary mts mbs text-center t-2" v-bind:is="input.block_type.replace(/^/,'rc-')" :key="input.block_type" :data="config" :event="input.settings.name" @click.native="addToNextDelivery()">((input.settings.label))</component>
										</template>
										<template v-else-if="input.block_type === 'datepicker'">
											<component class="rc-input_wrapper" v-bind:is="input.block_type.replace(/^/,'rc-')" :date="dateSelected" v-on:selectDate="changeDate($event)" :block="input" :key="input.block_type" :subscriptionsIds="subscriptionsIds"></component>
										</template>
										<template v-else>
											<component v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :options="input.settings" :key="input.block_type"></component>
										</template>
									</template>
									<template v-else>
										<template v-if="input.block_type === 'select'">
											<component class="rc-input_wrapper" v-bind:is="input.block_type.replace(/^/,'rc-')" :optionSelected="frequencySelected" v-on:changeFrequency="changeFrequency($event)" :options="FrequencyArray" :block="input" :key="input.block_type"></component>
										</template>
										<template v-else-if="input.block_type === 'datepicker'">
											<component class="rc-input_wrapper" v-bind:is="input.block_type.replace(/^/,'rc-')" :date="dateSelected" v-on:selectDate="changeDate($event)" :block="input" :key="input.block_type" :subscriptionsIds="subscriptionsIds"></component>
										</template>
										<template v-else>
											<component v-bind:is="input.block_type.replace(/^/,'rc-')" :data="data" :options="input.settings" :key="input.block_type"></component>
										</template>
									</template>
								</div>
							</template>
						</div>
					</div>
					<template v-for="input in form_config.item_level_options[0].submit" :key="input.key">
						<div class="mtm" v-bind:class="{ 'contact__field-left': input.position == 'left', 'contact__field-center': input.position == 'center', 'contact__field-right': input.position == 'right' }">
							<component v-bind:is="input.block_type.replace(/^/,'rc-')" :options="input.settings" :key="input.block_type" @click.native="changeDateAndFrequency()"></component>
						</div>
					</template>
				</div>
			</div>
			`
			})

	Vue.component('rc-update_mondial_relay', {
	    data: function () {
			console.log('Recharge data ', this.config.recharge_data);
			console.log('Shopify data ', this.config.shopify_data);
			// recharge_data.addresses[0].notes_attributes = [
			// 	{
			// 		"name":"point_ID",
			// 		"value":"014176"
			// 	},
			// 	{
			// 		"name":"point_Nom",
			// 		"value":"EASY GOO MOBILE"
			// 	},
			// 	{
			// 		"name":"point_Pays",
			// 		"value":"FR"
			// 	},
			// 	{
			// 		"name":"point_Ville",
			// 		"value":"PARIS"
			// 	},
			// 	{
			// 		"name":"point_CP",
			// 		"value":"75011"
			// 	},
			// 	{
			// 		"name":"point_Adresse1",
			// 		"value":"14 AVENUE DE LA REPUBLIQUE"
			// 	},
			// 	{
			// 		"name":"point_Adresse2",
			// 		"value":"null"
			// 	},
			// 	{
			// 		"name":"point",
			// 		"value":`"{"Adresse1":"14 AVENUE DE LA REPUBLIQUE","Adresse2":null,"Available":true,"CP":"75011","HoursHtmlTable":"<table class='PR-Hours' border='0' cellspacing='0' cellpadding='0'><tr><th>Lundi</th><td>10h00-19h30</td><td>-</td></tr></table><table class='PR-Hours' border='0' cellspacing='0' cellpadding='0'><tr class='d'><th>Mardi</th><td>10h00-19h30</td><td>-</td></tr></table><table class='PR-Hours' border='0' cellspacing='0' cellpadding='0'><tr><th>Mercredi</th><td>10h00-19h30</td><td>-</td></tr></table><table class='PR-Hours' border='0' cellspacing='0' cellpadding='0'><tr class='d'><th>Jeudi</th><td>10h00-19h30</td><td>-</td></tr></table><table class='PR-Hours' border='0' cellspacing='0' cellpadding='0'><tr><th>Vendredi</th><td>10h00-19h30</td><td>-</td></tr></table><table class='PR-Hours' border='0' cellspacing='0' cellpadding='0'><tr class='d'><th>Samedi</th><td>10h00-19h30</td><td>-</td></tr></table><table class='PR-Hours' border='0' cellspacing='0' cellpadding='0'><tr><th>Dimanche</th><td>10h00-19h30</td><td>-</td></tr></table>","ID":"014176","Lat":"48,8665164","Long":"2,3670898","Nature":"1","Nom":"EASY GOO MOBILE","Pays":"FR","Photo":null,"Ville":"PARIS","Warning":"","Letter":"K"}"`
			// 	}
			// ]
	      return {
	        rechargeData: this.config.recharge_data,
	        modals_config: this.config.pages_config.modals,
	        shopifyData: this.config.shopify_data
	      }
	    },
	    computed: {
	      form_config: function () {
	        var form_config;
	        for (var i = 0; i < this.modals_config.length; i++) {
	          if (this.modals_config[i].id == "update_mondial_relay") {
	            form_config = this.modals_config[i].components[0];
	          }
	        }
	        return form_config;
	      },
	    },
	    methods: {
	      changeDateAndFrequency() {
	        this.$eventHub.$emit('changeDateAndFrequency', { subscriptionsIds: this.subscriptionsIds, charge_interval_frequency: this.frequencySelected, next_charge_scheduled_at: commonsFilters.dateFormatterRecharge(this.dateSelected), interval_unit_type: this.frequencyUnit })
	      }
	    },
	    props: ['data', 'config'],
	    delimiters: ['((', '))'],
	    filters: commonsFilters,
	    template:  `
	    <div class="rc-modal__content-wrapper">
	      <h3 class="rc-modal__title heading z-h6" v-if="form_config.configurations.title.show">((form_config.configurations.title.label))</h3>
	      <p class="rc-input__label" v-if="form_config.configurations.subtitle.show">((form_config.configurations.subtitle.label))</p>
	      <p v-if="form_config.configurations.description_1.show">((form_config.configurations.description_1.label))</p>
	      <hr v-if="form_config.configurations.hr.show">
	      <p class="rc-input__label" v-if="form_config.configurations.subtitle_2.show">((form_config.configurations.subtitle_2.label))</p>
	      <p v-if="form_config.configurations.description_2.show">((form_config.configurations.description_2.label))</p>


	      <template v-for="input in form_config.item_level_options[0].submit" :key="input.key">
	        <div class="" v-bind:class="{ 'contact__field-left': input.position == 'left', 'contact__field-center': input.position == 'center', 'contact__field-right': input.position == 'right' }">
	          <component v-bind:is="input.block_type.replace(/^/,'rc-')" :options="input.settings" :key="input.block_type" @click.native="changeDateAndFrequency()"></component>
	        </div>
	      </template>
	    </div>
	    `
	    })

	//SHARED

	Vue.component('rc-aside', {
	    data: function () {
	      return {
	        modals_config: this.$attrs
	      }
	    },
	    methods: {
	      closeModal() {
	        this.$eventHub.$emit('closeModal');
	      }
	    },
	    inheritAttrs: false,
	    props: ['data_modal', 'component_modal', 'show_modal', 'config'],
	    delimiters: ['((', '))'],
	    template:  `
	    <aside class="rc-panel" v-bind:class="{'is-active': show_modal == true}">
	      <div class="rc-panel__content">
	        <div class="rc-panel__header">
	          <button class="rc-modal__close rc-panel__close" @click="closeModal()" v-if="component_modal != 'loader'">
	            <svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>
	          </button>
	        </div>
	        <template v-if="component_modal">
	          <component v-bind:is="component_modal.replace(/^/,'rc-')" :data="data_modal" :config="modals_config" :key="component_modal.block_type +'-'+ Math.floor(Math.random() * (10 - 1 + 1)) + 1"></component>
	        </template>
	      </div>
	    </aside>
	    `
	    })

	Vue.component('rc-button', {
	    data: function () {
	      return {

	      }
	    },
	    methods: {
	      onClick() {
	        console.log(this.event)
	      }
	    },
	    props: ['event'],
	    delimiters: ['((', '))'],
	    template:  `
	    <button type="button" name="button" class="button rc_button" @click="onClick()"><slot></slot></button>
	    `
	    })

	Vue.component('rc-checkbox', {
	    data: function () {
	      return {
	        value: ""
	      }
	    },
	    methods: {
	      onChange() {
	        this.$emit('input_callback', { inputName: this.options.name, value: this.value })
	      }
	    },
	    props: ['options', 'value'],
	    delimiters: ['((', '))'],
	    template:  `
	    <div>
	      <input v-model="value" type="checkbox" :id="options.id" :name="options.name" class="input text t-8 rc-input__checkbox" @change="onChange()"/>
	      <label class="rc-input__label-checkbox rc-hover-pointer" :for="options.id" >((options.label))</label>
	    </div>
	    `
	    })

	Vue.component('rc-datepicker', {
	    data: function () {
	      return {
	        fr: vdp_translation_fr.js,
	        format: 'D dd MMMM yyyy',
	        disabledDates: {
	          to: new Date()
	        }
	      }
	    },
	    methods: {
	      Submit() {
	        this.$eventHub.$emit('set_next_charge_date', { date: commonsFilters.dateFormatterRecharge(this.date), subscriptionsIds: this.subscriptionsIds})
	      },
	      changeDate($event) {
	        this.$emit('selectDate', { date: $event })
	      }
	    },
	    components: { vuejsDatepicker },
	    props: ['date', 'block', 'subscriptionsIds'],
	    delimiters: ['((', '))'],
	    template:  `
	    <div class="rc-input-container" v-bind:class="{'rc-input-container--background': block.settings.background == true}">
	      <label v-if="block.settings.label && block.settings.displayLabel" class="rc-order__subtitle rc-input__label" for="date_next_delivery">((block.settings.label))</label>
	      <div class="rc-datepicker-container rc-input rc-input--full product__select">
	        <vuejs-datepicker v-if="block.settings.button" :language="fr" :format="format" :disabled-dates="disabledDates" v-model="date" name="uniquename" class="rc-datepicker"></vuejs-datepicker>
	        <vuejs-datepicker v-else :language="fr" :format="format" :disabled-dates="disabledDates" v-model="date" name="uniquename" class="rc-datepicker" v-on:selected="changeDate($event)"></vuejs-datepicker>
	        <div class="rc-datepicker-svg">
	          <svg class="icon icon-calendar" width="16px" height="17px" viewBox="0 0 16 17" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
	            <g id="Userflow_NewSubscription" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
	              <g id="UserFlow_D_NewSubscription_3" transform="translate(-1104.000000, -563.000000)" fill="#0d3c32">
	                <g id="Product-Info" transform="translate(491.000000, 249.000000)">
	                  <g id="Stacked-Group" transform="translate(0.000000, 8.000000)">
	                    <g id="Purchasing-Info" transform="translate(480.000000, 4.000000)">
	                      <g id="Buttons" transform="translate(0.000000, 156.000000)">
	                        <g id="Stacked-Group" transform="translate(0.000000, 128.000000)">
	                          <g id="Custom-Delivery-Date" transform="translate(120.000000, 0.000000)">
	                            <path d="M14.6428585,33.1428585 L17.2142901,33.1428585 L17.2142901,30.5714269 L14.6428585,30.5714269 L14.6428585,33.1428585 Z M17.7857194,33.1428585 L20.6428657,33.1428585 L20.6428657,30.5714269 L17.7857194,30.5714269 L17.7857194,33.1428585 Z M14.6428585,29.9999976 L17.2142901,29.9999976 L17.2142901,27.1428514 L14.6428585,27.1428514 L14.6428585,29.9999976 Z M17.7857194,29.9999976 L20.6428657,29.9999976 L20.6428657,27.1428514 L17.7857194,27.1428514 L17.7857194,29.9999976 Z M14.6428585,26.5714221 L17.2142901,26.5714221 L17.2142901,23.9999905 L14.6428585,23.9999905 L14.6428585,26.5714221 Z M21.2142949,33.1428585 L24.0714412,33.1428585 L24.0714412,30.5714269 L21.2142949,30.5714269 L21.2142949,33.1428585 Z M17.7857194,26.5714221 L20.6428657,26.5714221 L20.6428657,23.9999905 L17.7857194,23.9999905 L17.7857194,26.5714221 Z M24.6428704,33.1428585 L27.2143021,33.1428585 L27.2143021,30.5714269 L24.6428704,30.5714269 L24.6428704,33.1428585 Z M21.2142949,29.9999976 L24.0714412,29.9999976 L24.0714412,27.1428514 L21.2142949,27.1428514 L21.2142949,29.9999976 Z M18.071434,22.2857027 L18.071434,19.7142711 C18.071434,19.5624852 17.9375053,19.4285564 17.7857194,19.4285564 L17.2142901,19.4285564 C17.0625042,19.4285564 16.9285755,19.5624852 16.9285755,19.7142711 L16.9285755,22.2857027 C16.9285755,22.4374886 17.0625042,22.5714173 17.2142901,22.5714173 L17.7857194,22.5714173 C17.9375053,22.5714173 18.071434,22.4374886 18.071434,22.2857027 Z M24.6428704,29.9999976 L27.2143021,29.9999976 L27.2143021,27.1428514 L24.6428704,27.1428514 L24.6428704,29.9999976 Z M21.2142949,26.5714221 L24.0714412,26.5714221 L24.0714412,23.9999905 L21.2142949,23.9999905 L21.2142949,26.5714221 Z M24.6428704,26.5714221 L27.2143021,26.5714221 L27.2143021,23.9999905 L24.6428704,23.9999905 L24.6428704,26.5714221 Z M24.9285851,22.2857027 L24.9285851,19.7142711 C24.9285851,19.5624852 24.7946563,19.4285564 24.6428704,19.4285564 L24.0714412,19.4285564 C23.9196553,19.4285564 23.7857265,19.5624852 23.7857265,19.7142711 L23.7857265,22.2857027 C23.7857265,22.4374886 23.9196553,22.5714173 24.0714412,22.5714173 L24.6428704,22.5714173 C24.7946563,22.5714173 24.9285851,22.4374886 24.9285851,22.2857027 Z M28.3571606,21.7142735 L28.3571606,33.1428585 C28.3571606,33.7678593 27.8393028,34.285717 27.2143021,34.285717 L14.6428585,34.285717 C14.0178578,34.285717 13.5,33.7678593 13.5,33.1428585 L13.5,21.7142735 C13.5,21.0892727 14.0178578,20.5714149 14.6428585,20.5714149 L15.785717,20.5714149 L15.785717,19.7142711 C15.785717,18.9285558 16.4285749,18.2856979 17.2142901,18.2856979 L17.7857194,18.2856979 C18.5714346,18.2856979 19.2142925,18.9285558 19.2142925,19.7142711 L19.2142925,20.5714149 L22.642868,20.5714149 L22.642868,19.7142711 C22.642868,18.9285558 23.285726,18.2856979 24.0714412,18.2856979 L24.6428704,18.2856979 C25.4285856,18.2856979 26.0714436,18.9285558 26.0714436,19.7142711 L26.0714436,20.5714149 L27.2143021,20.5714149 C27.8393028,20.5714149 28.3571606,21.0892727 28.3571606,21.7142735 Z" id="calendar---FontAwesome"></path>
	                          </g>
	                        </g>
	                      </g>
	                    </g>
	                  </g>
	                </g>
	              </g>
	            </g>
	          </svg>
	        </div>
	      </div>
	      <button v-if="block.settings.button" class="mts" @click="Submit()">Valider</button>
	    </div>
	    `
	    })

			Vue.component('rc-input', {
			    data: function () {
			      return {
			        msg: "",
			        regex_email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,24}))$/,
			        regex_zip: /^[0-9]{1,5}$/,
			        regex_phone: /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$/,
			      }
			    },
			    methods: {
			      onChange({ type, target }) {
			        if (target.type === 'email') {
			          if (this.isEmailValid(target.value)) {
			            this.$emit('input_callback', { inputName: this.options.name, value: target.value })
			            this.msg = "";
			          } else {
			            this.$emit('input_callback', { inputName: this.options.name, value: null })
			            this.msg = this.options.error;
			          }
			        } if (target.type === 'number') {
			          if (this.isNumberValid(target.value)) {
			            this.$emit('input_callback', { inputName: this.options.name, value: target.value })
			            this.msg = "";
			          } else {
			            this.$emit('input_callback', { inputName: this.options.name, value: null })
			            this.msg = this.options.error;
			          }
			        } if (target.id === 'phone') {
			          if (this.isPhoneValid(target.value)) {
			            this.$emit('input_callback', { inputName: this.options.name, value: target.value })
			            this.msg = "";
			          } else {
			            this.$emit('input_callback', { inputName: this.options.name, value: null })
			            this.msg = this.options.error;
			          }
			        } else {
			          if (target.required) {
			            if (this.isInputValid(target.value)) {
			              this.$emit('input_callback', { inputName: this.options.name, value: target.value })
			              this.msg = "";
			            } else {
			              this.$emit('input_callback', { inputName: this.options.name, value: null })
			              this.msg = this.options.error;
			            }
			          } else {
			            this.$emit('input_callback', { inputName: this.options.name, value: target.value })
			          }
			        }
			      },
			      isEmailValid: function(email) {
			        if (email != "" && email != null) {
			          return (this.regex_email.test(email)) ? true : false;
			        } else {
			          return false
			        }
			      },
			      isNumberValid: function(number) {
			        if (number != "" && number != null) {
			          return (this.regex_zip.test(number)) ? true : false;
			        } else {
			          return false
			        }
			      },
			      isPhoneValid: function(phone) {
			        if (phone != "" && phone != null) {
			          return (this.regex_phone.test(phone)) ? true : false;
			        } else {
			          return false
			        }
			      },
			      isInputValid: function(value) {
							if (value != "" && value != null) {
								return true
							}
			        return false
			      }
			    },
			    props: ['data', 'options', 'value'],
			    delimiters: ['((', '))'],
			    template:  `
			    <div>
			      <input @input="onChange" :type="options.type" :value="value" :required="options.required" :id="options.id" :name="options.name" :placeholder="options.placeholder" :disabled="options.disabled" class="input text t-2 input--full rc-input" autocomplete/>
			      <span v-if="msg != ''">((msg))</span>
			    </div>
			    `
			    })

	Vue.component('rc-line-item', {
		    data: function () {
		      return {
		        linkTracking: 'https://franklinpetfood.com/pages/tracking?orderNumber='
		      }
		    },
		    computed: {
		      dateMoreTwoWeeks() {
		        var result = false;
		        var fortnightAway = new Date(+new Date - 12096e5);
		        if (new Date(this.data.node.processedAt) < fortnightAway) {
		          var result = true;
		        }
		        return result;
		      }
		    },
		    methods: {
		      orderViewDetails(data) {
		        this.$emit('orderViewDetails', { data: data })
		      }
		    },
		    props: ['view', 'data', 'source'],
		    delimiters: ['((', '))'],
		    filters: commonsFilters,
		    template:  `
		    <template>
		      <div v-if="view == 'inline'" class="rc-order__product">
		        <div class="rc-order__product-info rc-input--double w100" v-if="source == 'shopify'">
		          <p class="rc-order__title">Ma dernière commande du ((data.node.processedAt | dateFormatterLong))</p>
		          <div class="button button--secondary" v-if="dateMoreTwoWeeks">Commande terminée</div>
		          <div v-else><a class="button button--secondary" :href="linkTracking + data.node.orderNumber" target="_blank">Suivre mon colis</a></div>
		        </div>
		        <div class="rc-order__product-info" v-if="source == 'recharge'">
		          <p class="rc-order__subtitle">Commande #((data.id)) passée le ((data.processed_at | dateFormatter))</p>
		          <p class="rc-order__product_text">((data.status | statusRecharge))</p>
		        </div>
		      </div>
		      <tr v-else class="rc-order-contents">
		        <template v-if="source == 'shopify'">
		          <td class="rc-order-content"><h3 class="rc-order__product_title man rc-hover-pointer rc-hover-underline" @click="orderViewDetails(data.node)">#((data.node.orderNumber))</h3></td>
		          <td class="rc-order-content">((data.node.processedAt | dateFormatter))</td>
		          <td class="rc-order-content">((data.node.totalPrice | priceFormatter))</td>
		          <td class="rc-order-content rc-order-content-full" v-if="dateMoreTwoWeeks">Commande terminée</td>
		          <td class="rc-order-content rc-order-content-full" v-else><a class="button button--secondary" :href="linkTracking + data.node.orderNumber" target="_blank">Suivre mon colis</a></td>
		        </template>
		        <template v-if="source == 'recharge'">
		          <td class="rc-order-content"><h3 class="rc-order__product_title man">#((data.id))</h3></td>
		          <td class="rc-order-content">((data.processed_at | dateFormatter))</td>
		          <td class="rc-order-content">((data.total_price | priceFormatter))</td>
		          <td class="rc-order-content">((data.status | statusRecharge))</td>
		        </template>
		      </tr>
		    </template>
		    `
		    })

	Vue.component('rc-link', {
			data: function () {
				return {
				}
			},
			methods: {
				onClick() {
					console.log(this.event)
					if (this.event === 'add_to_next_delivery') {
						console.log(this.data.recharge_data);
					}
				}
			},
			props: ['event', 'data'],
			delimiters: ['((', '))'],
			template:  `
			<template>
				<p @click="onClick()"><slot></slot></p>
			</template>
			`
			})

	Vue.component('rc-modal', {
	    data: function () {
	      return {
	        modals_config: this.$attrs
	      }
	    },
	    methods: {
	      closeModal() {
	        this.$eventHub.$emit('closeModal');
	      }
	    },
			created() {
				//do something after creating vue instance
				this.$eventHub.$on('getRechargeData', data => {
					console.log(this.modals_config);
					this.modals_config.recharge_data = data;
					console.log(this.modals_config);
				})
			},
	    inheritAttrs: false,
	    props: ['data_modal', 'component_modal', 'show_modal', 'config'],
	    delimiters: ['((', '))'],
	    template:  `
	    <div class="rc-modal" v-bind:class="{'is-active': show_modal == true}">
	      <div class="rc-modal__container">
	        <button class="rc-modal__close rc-panel__close" @click="closeModal()" v-if="component_modal != 'loader'">
	          <svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>
	        </button>
	        <template v-if="component_modal">
	          <component v-bind:is="component_modal.replace(/^/,'rc-')" :data="data_modal" :config="modals_config" :key="component_modal.block_type +'-'+ Math.floor(Math.random() * (10 - 1 + 1)) + 1"></component>
	        </template>
	      </div>
	    </div>
	    `
	    })

	Vue.component('rc-picto-text', {
	    data: function () {
	      return {

	      }
	    },
	    methods: {
	      onClick() {
	        console.log(this.event)
	      }
	    },
	    props: ['data', 'options'],
	    delimiters: ['((', '))'],
	    template:  `
	    <div class="text-center">
	      <img :src="options.picto" class="rc-picto-text_image">
	      <p class="rc-order__subtitle z-h7 text-center">((options.title))</p>
	      <p class="text-center">((options.content))</p>
	    </div>
	    `
	    })

	Vue.component('rc-product-item', {
			data: function () {
				return {
					nextSubscriptionId: this.data.subscription.id,
					//nextChargeId: this.data.charge.id,
				}
			},
			created() {
				var event = document.createEvent("Event");
				event.initEvent("initQuickviewHandle", false, true);
				window.dispatchEvent(event);
			},
			methods: {
			 openModalProduct: function (component, product) {
					if (component == 'change_product') {
						this.$eventHub.$emit('openModal', { component: component, data: product})
					}
					if (component == 'update_frequency') {
						this.$eventHub.$emit('openModal', { component: component, data: this.data})
					}
					if (component == 'cancel_product') {
						this.$eventHub.$emit('openModal', { component: component, data: { 'subscriptionsIds': this.subscriptionsIds, 'product': product }});
					}
			 },
			 activeSubscription: function () {
				 this.$eventHub.$emit('active_product', { SubscriptionId: this.data.subscription.id})
			 }
			},
			computed: {
				subscriptionsIds: function () {
					var subscriptionsIds = {};
					subscriptionsIds[this.data.subscription.address_id] = subscriptionsIds[this.data.subscription.address_id] || {};
					subscriptionsIds[this.data.subscription.address_id]['old_address_id'] = this.data.subscription.address_id;
					subscriptionsIds[this.data.subscription.address_id]['subscriptionIds'] = subscriptionsIds[this.data.subscription.address_id]['subscriptionIds'] || [];
					subscriptionsIds[this.data.subscription.address_id]['subscriptionIds'].push(this.data.subscription.id);
					var subscriptionsIdsArray = Object.keys(subscriptionsIds).map((key) => subscriptionsIds[key]);
					return subscriptionsIdsArray;
				},
				item_level_options: function () {
					var item_level_options = [];
					for (var i = 0; i < this.component.item_level_options.length; i++) {
						item_level_options.push({
							value: this.component.item_level_options[i].option,
							text: this.component.item_level_options[i].settings.label
						})
					}
					return item_level_options;
				},
			},
			watch: {
				'dataRecharge': {
					handler(newVal, oldVal) {
						this.dataRecharge = this.dataRecharge
					},
					deep: true
				}
			},
			props: ['view', 'data', 'component', 'state', 'general_config', 'dataRecharge'],
			delimiters: ['((', '))'],
			filters: commonsFilters,
			template:  `
			<div class="rc-order__product-schedule mts" v-bind:class="{ 'rc-order__product-schedule-cancel': state == 'cancel'}">
				<div class="rc-order__product-schedule-image-title">
					<div class="rc-quickview-trigger rc-order__image-wrapper" data-open-quickview :data-product-handle="data.subscription.product.shopify_details.handle">
						<img class="" :src="data.subscription.product.shopify_details.image.src">
					</div>
					<div class="rc-order__info-wrapper">
						<p class="rc-order__product_title rc-quickview-trigger" data-open-quickview :data-product-handle="data.subscription.product.shopify_details.handle">((data.subscription.product_title | cleanTitleSubscription))</p>
						<p class="text t-5 product__vendor">((data.subscription.product.shopify_details.vendor))</p>
						<rc-select-conditionnement :nextSubscriptionId="nextSubscriptionId" :optionSelected="'default'" :subscription="data.subscription" class="rc-input-max-content"></rc-select-conditionnement>
						<p>Fréquence de livraison tous les ((data.subscription.order_interval_frequency)) ((data.subscription.order_interval_unit | dateUnitFormatter))</p>
					</div>
				</div>
				<div class="rc-order__product-schedule-quantity-price">
					<div class="rc-order__qty-wrapper mauto">
						<rc-quantity :quantity="data.subscription.quantity" :general_config="general_config" :shopifyVariantId="data.subscription.shopify_variant_id" :subscriptionId="data.subscription.id"></rc-quantity>
					</div>
					<div class="rc-order__price-wrapper">
						<p class="rc-order__text rc_text rc-strong">((data.subscription.price | priceFormatter))</p>
					</div>
				</div>
				<div class="rc-order__actions-wrapper" v-if="state == 'active'">
					<rc-select class="rc-order__product-schedule-edit" :subscriptionsIds="subscriptionsIds" :nextSubscriptionId="nextSubscriptionId" :optionSelected="'default'" :dataRecharge="dataRecharge" v-on:openModalProduct="openModalProduct($event.component, data.subscription)" :block="{settings: {background: false, full_width: false, name: 'edit_product'}}" :options="[{value: 'default',text: 'Modifier'}]" :optionsAction="item_level_options"></rc-select>
				</div>
				<div class="rc-order__actions-wrapper" v-if="state == 'cancel'">
					<template v-for="block in item_level_options" :key="block.key">
						<rc-button class="button--invert-secondary" :event="block.value" @click.native="activeSubscription()">((block.text))</rc-button>
					</template>
				</div>
			</div>
			`
			})

	Vue.component('rc-quantity', {
	    data: function () {
	      return {

	      }
	    },
	    methods: {
	      increment () {
	        this.quantity++
	        if (this.subscriptionId && this.shopifyVariantId) {
	          this.$eventHub.$emit('set_quantity', { quantity: this.quantity, shopifyVariantId: this.shopifyVariantId, nextSubscriptionId: this.subscriptionId})
	        } else {
	          this.$emit('changeQuantity', { quantity: this.quantity })
	        }
	      },
	      decrement () {
	        if(this.quantity === 1) {
	          this.$toastr.Add({
	  				  title: '<svg class="icon" height="14px" viewBox="0 0 329.26933 329" width="14px" xmlns="http://www.w3.org/2000/svg"><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0"/></svg>',
	  				  msg: this.general_config.alerts.quantityMinError.error,
	  					position: 'toast-top-right',
	  				  clickClose: true,
	  				  type: 'error',
	  					progressbar: false
	  				});
	        } else {
	          this.quantity--
	          if (this.subscriptionId && this.shopifyVariantId) {
	            this.$eventHub.$emit('set_quantity', { quantity: this.quantity, shopifyVariantId: this.shopifyVariantId, nextSubscriptionId: this.subscriptionId})
	          } else {
	            this.$emit('changeQuantity', { quantity: this.quantity })
	          }
	        }
	      }
	    },
	    props: ['general_config', 'quantity', 'shopifyVariantId', 'subscriptionId'],
	    delimiters: ['((', '))'],
	    template:  `
	    <div class="product__option-content product__qty-container">
	      <div data-product-minus="" @click="decrement()" class="product__qty-btn">-</div>
	      <div class="product__qty text--medium ">
	        <span data-product-quantity="" class="product__qty-nb rc_text rc-strong">((quantity))</span>
	      </div>
	      <div data-product-plus="" @click="increment()" class="product__qty-btn">+</div>
	    </div>
	    `
	    })

	Vue.component('rc-radio', {
	    data: function () {
	      return {
	        value: ""
	      }
	    },
	    methods: {
	      onChange() {
	        console.log(this.value)
	        this.$emit('input_callback', { inputName: this.options.name, value: this.options.label })
	      }
	    },
	    props: ['options', 'value'],
	    delimiters: ['((', '))'],
	    template:  `
	    <div>
	      <input v-model="value" type="radio" :id="options.id" :name="options.name" class="input text t-8 rc-input__radio" @change="onChange()"/>
	      <label class="rc-input__label-radio rc-hover-pointer" :for="options.id" >((options.label))</label>
	    </div>
	    `
	    })

	Vue.component('rc-select-conditionnement-modal', {
	    data: function () {
	      return {
	        onlyOneOption: false,
	        key: "",
	        variantSelected: this.variants[0].shopify_id
	      }
	    },
	    props: ['variants', 'label', 'nextSubscriptionId'],
	    delimiters: ['((', '))'],
	    computed: {
	      variantsArray: function () {
	        var variantsArray = [];
	        if (this.variants.length == 1) {
	          this.onlyOneOption = true;
	        }
	        for (var i = 0; i < this.variants.length; i++) {
	          variantsArray.push({
	            value: this.variants[i].shopify_id,
	            text: this.variants[i].title
	          })
	        }
	        return variantsArray;
	      },
	    },
	    methods: {
	       selectVariant(variantId) {
	         var price = this.findPriceVariant(variantId);
	         this.$emit('selectVariant', { variantId: variantId, price: price })
	       },
	       findPriceVariant(variantId) {
	         for (var i = 0; i < this.variants.length; i++) {
	          if (this.variants[i].shopify_id == variantId) {
	            return this.variants[i].price;
	          }
	        }
	      }
	     },
	    template:  `
	    <div class="rc-input-container">
	      <label class="rc-order__subtitle rc-input__label" v-if="label">((label))</label>
	      <p v-if="onlyOneOption">
	        <span v-for="option in variantsArray" :key="option.key">((option.text))</span>
	      </p>
	      <template v-else>
	        <rc-select class="rc-input-container-full" :nextSubscriptionId="nextSubscriptionId" :optionSelected="variantSelected" :options="variantsArray" v-on:selectVariant="selectVariant($event.variantId)" :block="{settings:{background: false, full_width: false, name: 'select_variant', customClass: true}}"></rc-select>
	      </template>
	    </div>
	    `
	    })

	Vue.component('rc-select-conditionnement', {
	    data: function () {
	      return {
	        key: "",
	        variantSelected: this.subscription.shopify_variant_id
	      }
	    },
	    props: ['subscription', 'label', 'nextSubscriptionId'],
	    delimiters: ['((', '))'],
	    computed: {
	      variantsArray: function () {
	        var variantsArray = [];
	        for (var i = 0; i < this.subscription.product.shopify_details.variants.length; i++) {
	          variantsArray.push({
	            value: this.subscription.product.shopify_details.variants[i].shopify_id,
	            text: this.subscription.product.shopify_details.variants[i].title,
	            optionsVariants: {
	              option1: this.subscription.product.shopify_details.variants[i].option1,
	              option2: this.subscription.product.shopify_details.variants[i].option2,
	              option3: this.subscription.product.shopify_details.variants[i].option3
	            }
	          })
	        }
	        return variantsArray;
	      },
	    },
	    methods: {
	       onChange() {
	         console.log(this.key);
	       }
	     },
			 watch: {
				'subscription': {
					handler(newVal, oldVal) {
					 this.variantSelected = this.subscription.shopify_variant_id
					},
					deep: true
				}
			},
	    template:  `
	    <div class="rc-input-container">
	      <label class="rc-order__subtitle rc-input__label" v-if="label">((label))</label>
	      <p v-if="variantsArray.length == 1">
	        <span v-for="option in variantsArray" :key="option.key">((option.text))</span>
	      </p>
	      <template v-else>
	        <rc-select :nextSubscriptionId="nextSubscriptionId" :optionSelected="variantSelected" :options="variantsArray" :block="{settings:{background: false, full_width: false, name: 'edit_variant', customClass: true}}"></rc-select>
	      </template>
	    </div>
	    `
	    })

	Vue.component('rc-select', {
	    data: function () {
	      return {
	        key: ""
	      }
	    },
	    methods: {
	      onChange(event) {
	        console.log(event.target.name)
	        console.log(this.optionSelected)
	        //changer le moyen de livraison block schedule
	        if (this.optionSelected === "update_delivery"
	            || this.optionSelected === "update_mondial_relay") {
	          this.$eventHub.$emit('openModal', { component: this.optionSelected, data: { subscriptionsIds: this.subscriptionsIds }})
	          this.optionSelected = this.options[0].value;
	        }
	        //changer l'adresse de livraison block schedule
	        if (event.target.name === 'edit_address') {
	          if (this.optionSelected === "add_address") {
	            this.$eventHub.$emit('openModal', { component: this.optionSelected, data: { showCheckbox: true, subscriptionsIds: this.subscriptionsIds }})
	          } else {
	            this.$eventHub.$emit('change_adresse', { address_id: this.optionSelected, subscriptionsIds: this.subscriptionsIds})
	          }
	        }
	        //changer de recette product item
	        if (this.optionSelected === "change_product") {
	          this.$emit('openModalProduct', { component: this.optionSelected, data: "ok"})
	          this.optionSelected = 'default';
	        }
	        //changer date et frequence
	        if (this.optionSelected === "update_frequency") {
	          this.$emit('openModalProduct', { component: this.optionSelected, data: "ok"})
	          this.optionSelected = 'default';
	        }
	        //Mettre de côté/cancel product item
	        if (this.optionSelected === "cancel_product") {
						var subscriptionsActiveCount = 0;
						for (var i = 0; i < this.dataRecharge.subscriptions.length; i++) {
		          if (this.dataRecharge.subscriptions[i].status == 'ACTIVE') {
		            subscriptionsActiveCount++
							}
		        }
						if (subscriptionsActiveCount == 1) {
							this.$emit('openModalProduct', { component: this.optionSelected, data: "ok"})
						} else {
							this.$eventHub.$emit('cancel_product', { cancellation_reason: 'Autre', cancellation_reason_comments: '', subscriptionsIds: this.subscriptionsIds })
						}
	          this.optionSelected = 'default';
	        }
	        //Remove/delete product product item
	        if (this.optionSelected === "remove_product") {
						console.log(this.dataRecharge);
						if (this.dataRecharge.customer.number_active_subscriptions == 1) {
							this.$eventHub.$emit('openModal', { component: 'confirmation', data: { action: 'delete_subscription', subscriptionsIds: this.subscriptionsIds}})
						} else {
							this.$eventHub.$emit('delete_subscription', { subscriptionsIds: this.subscriptionsIds })
						}
	          this.optionSelected = 'default';
	        }
	        //Change variante product item
	        if (event.target.name === "edit_variant") {
	          this.$eventHub.$emit('edit_variant', { variantId: this.optionSelected, nextSubscriptionId: this.nextSubscriptionId})
	        }
	        //select variant new subscription or edit susbscription
	        if (event.target.name === "select_variant") {
	          this.$emit('selectVariant', { variantId: this.optionSelected })
	        }
	        //select frequency new subscription or edit susbscription
	        if (event.target.name === "select_frequency") {
	          this.$emit('changeFrequency', { frequency: this.optionSelected })
	        }
	        //select address new subscription or edit susbscription
	        if (event.target.name === "select_address") {
	          this.$emit('changeAddress', { address: this.optionSelected })
	        }
	        //select address country
	        if (event.target.name === "country") {
	          this.$emit('input_callback', { inputName: event.target.name, value: this.optionSelected })
	        }
	      },
	    },
	    computed: {
	    },
	    props: ['options', 'optionsAction', 'block', 'optionSelected', 'nextSubscriptionId', 'subscriptionsIds', 'isMondialRelay', 'dataRecharge'],
	    delimiters: ['((', '))'],
	    template:  `
	    <div class="rc-input-container" v-bind:class="{'rc-input-container--background': block.settings.background == true}">
	      <label v-if="block.settings.label && block.settings.displayLabel" class="rc-order__subtitle rc-input__label">((block.settings.label))</label>
	      <select :optionSelected="optionSelected" v-model="optionSelected" :name="block.settings.name" class="rc-input rc-add_product__form-select product__select" v-bind:class="{'rc-input--full': block.settings.full_width == true }" @change="onChange($event)">
	        <option v-if="options && option.optionsVariants" v-for="option in options" :key="option.key" :value="option.value" :data-option-1="option.optionsVariants.option1" :data-option-2="option.optionsVariants.option2" :data-option-3="option.optionsVariants.option3">((option.text))</option>
	        <template v-if="options && !option.optionsVariants" v-for="option in options" :key="option.key" >
	          <option :value="option.value" v-if="option.value == 'default'" hidden>((option.text))</option>
	          <option :value="option.value" v-else>((option.text))</option>
	        </template>
	        <option v-if="optionsAction && block.settings.name != 'edit_delivery'" v-for="option in optionsAction" :key="option.key" :value="option.value">((option.text))</option>
	        <option v-if="optionsAction && block.settings.name == 'edit_delivery' && isMondialRelay" v-for="option in optionsAction" :key="option.key" :value="option.value">((option.text))</option>
	        <option v-if="optionsAction && block.settings.name == 'edit_delivery' && !isMondialRelay && option.value != 'update_mondial_relay'" v-for="option in optionsAction" :key="option.key" :value="option.value">((option.text))</option>

	      </select>
	      <button v-if="block.settings.button == true" class="mts" @click="Submit(block.settings.name)">Valider</button>
	    </div>
	    `
	    })

	Vue.component('rc-submit', {
	    data: function () {
	      return {

	      }
	    },
	    methods: {
	      onClick() {
	        console.log(this.options)
	      }
	    },
	    props: ['options'],
	    delimiters: ['((', '))'],
	    template:  `
	    <input type="submit" class="button button--secondary" @click="onClick()" :value="options.label"/>
	    `
	    })
</script>
